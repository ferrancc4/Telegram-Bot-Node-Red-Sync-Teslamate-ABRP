[
    {
        "id": "53c16985a9ab28c1",
        "type": "tab",
        "label": "Tesla CAT",
        "disabled": false,
        "info": ""
    },
    {
        "id": "63e89f01a9d0a5f7",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "geofence",
        "func": "let previous_fence = flow.get('geofence');\nlet new_fence = msg.payload;\n//flow.set('geofence',new_fence);\nmsg.topic = '';\n\nif(previous_fence !== new_fence){\n    if(previous_fence !== \"\"){\n        msg.topic = `surt de la zona <b>${previous_fence}</b>`;\n    }\n    if(new_fence !== \"\"){\n        if(previous_fence !== \"\"){\n            msg.topic += ' y ';\n        }\n        msg.topic += `entra a la zona <b>${new_fence}</b>`;\n    }\n} else return null;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nflow.set('geofence','Casa');",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 120,
        "wires": [
            [
                "b589e4a07a793dfe"
            ]
        ]
    },
    {
        "id": "b589e4a07a793dfe",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Format message",
        "func": "let display_name = flow.get('display_name');\n\nmsg.payload = {\n    chatId: flow.get('telegram_chatId'),\n    type: 'message',\n    content: `<b>${display_name}</b> ${msg.topic}`\n}\nmsg.payload.options = {\n    parse_mode : \"HTML\", \n    disable_web_page_preview: true\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 140,
        "wires": [
            [
                "ccec2afe8a7a0147"
            ]
        ]
    },
    {
        "id": "ccec2afe8a7a0147",
        "type": "telegram sender",
        "z": "53c16985a9ab28c1",
        "name": "Status messages",
        "bot": "13c2734f57e9b03e",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1050,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "ab7665f65b2617e4",
        "type": "switch",
        "z": "53c16985a9ab28c1",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "state",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "geofence",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "time_to_full_charge",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_version",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "elevation",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "is_climate_on",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "charger_power",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "battery_level",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "power",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 9,
        "x": 270,
        "y": 380,
        "wires": [
            [
                "401849d543c1e2c1",
                "a622eb55ea1ec50a",
                "8005a6e7156dbac6",
                "30afbb0f95259f0e",
                "9a827af65c11afda",
                "10204c2cfc38a340",
                "b1f04a7ddc3c27a5",
                "426c0f1b5377b6de",
                "2f5d7807a327af8e",
                "574022d592e40ccd"
            ],
            [],
            [],
            [
                "d98765bf05926460"
            ],
            [
                "03136f3eefe5e75b"
            ],
            [
                "c71c699748f9f661"
            ],
            [
                "df0f720ab0503a51"
            ],
            [
                "6689debbd72fed7e",
                "574022d592e40ccd"
            ],
            []
        ]
    },
    {
        "id": "62adee9f9e4d5d46",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "time to full charge",
        "func": "//node.warn(msg.topic + \": \" + msg.payload);\n\nlet previous = flow.get('time_to_full_charge');\nif(flow.get('state') !== 'charging' || \n    previous.timeleft === msg.payload){\n        //node.warn('returned from 1 ' + flow.get('state'))\n        return;\n}\n\nlet now = Math.round(Date.now()/1000);\nlet current = { timestamp: now, timeleft: msg.payload};\nlet remaining = msg.payload.split('.');\nlet minutes = Math.ceil(60 * Number(\".\" + remaining[1]));\n\n// If more than 1 hour remaining, print max 1 time per 15 minutes\nif(remaining[0] > 0 && (now - previous.timestamp)/60 <= 15)\n    return;\n// If less than 1 hour remaining, print max 1 time per 5 minutes\nif(remaining[0] == 0 && (now - previous.timestamp)/60 < 5)\n    return;\n    \nlet how_long = \"\";\nif(remaining[0] > 0){\n    how_long = `${remaining[0]} hores ${minutes} minuts`\n} else {\n    how_long = `${minutes} minuts`\n}\nflow.set('time_to_full_charge',current);\nmsg.topic = `estar√† carregat en <b>${how_long}</b>`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nflow.set('time_to_full_charge',{timestamp:0,timeleft:0});\n",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 180,
        "wires": [
            [
                "b589e4a07a793dfe"
            ]
        ]
    },
    {
        "id": "d98765bf05926460",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "update",
        "func": "let payload = msg.payload;\nlet current_version = flow.get('software_current_version');\nlet new_version = flow.get('software_new_version');\n\n//node.warn(msg.topic + \": \" + msg.payload);\n\nif (payload !== \"\" && payload !== current_version && payload !== new_version) {\n    msg.topic = `üéÅ t√© una actualitzaci√≥ disponible: <a href=\"https://www.notateslaapp.com/software-updates/version/${payload}/release-notes\"><i>${payload}</i></a>`;\n    //flow.set('software_new_version', payload);\n} else {\n    return;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 240,
        "wires": [
            [
                "b589e4a07a793dfe"
            ]
        ]
    },
    {
        "id": "a33d94f33f79694f",
        "type": "link out",
        "z": "53c16985a9ab28c1",
        "name": "change-state",
        "mode": "link",
        "links": [
            "e4d4cff5c81bbc57"
        ],
        "x": 635,
        "y": 60,
        "wires": []
    },
    {
        "id": "f78061b445e66c5e",
        "type": "delay",
        "z": "53c16985a9ab28c1",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1840,
        "y": 180,
        "wires": [
            [
                "b513b03057259c13"
            ]
        ]
    },
    {
        "id": "94c63a817f9d634a",
        "type": "switch",
        "z": "53c16985a9ab28c1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "charging",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "driving",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "parked",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "online",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1430,
        "y": 420,
        "wires": [
            [
                "9a5eee6a44b2696f"
            ],
            [
                "c0ed29937ee3e90d"
            ],
            [
                "88f2c76611bf8862"
            ],
            [
                "88f2c76611bf8862"
            ],
            [
                "4b835269d68806ed"
            ]
        ]
    },
    {
        "id": "c0ed29937ee3e90d",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "set parameters",
        "func": "const USER_TOKEN = flow.get('abrp_user_token');\nconst CAR_MODEL = flow.get('abrp_car_model');\nconst API_KEY = flow.get('abrp_api_key');\n\nlet data = {\n    utc: Math.floor(Date.now() / 1000),\n    soc: flow.get('usable_battery_level') || 0,\n    power: flow.get('power') || 0,\n    speed: flow.get('speed') || 0,\n    lat: flow.get('latitude') || 0,\n    lon: flow.get('longitude') || 0,\n    is_charging: false,\n    is_dcfc: false,\n    is_parked: false,\n    heading: flow.get('heading') || 0,\n    elevation: flow.get('elevation') || 0,\n    ext_temp: flow.get('outside_temp') || 0,\n    voltage: flow.get('charger_voltage') || 0,\n    current: flow.get('charger_actual_current') || 0,\n    odometer: flow.get('odometer') || 0,\n    est_battery_range: flow.get('rated_battery_range_km') || 0,\n    kwh_charged: flow.get('charge_energy_added') || 0,\n    car_model: CAR_MODEL\n};\nlet state = flow.get('state');\n\nswitch(state) {\n    case 'driving':\n        data.is_parked = false\n        data.is_charging = false\n        data.is_dcfc = false\n        break;\n    case 'charging':\n        data.is_parked = true\n        data.is_charging = true\n        data.is_dcfc = true\n        break;\n    default:\n        data.is_parked = true\n        data.is_charging = false\n        data.is_dcfc = false\n}\n\nif (parseInt(flow.get('charger_power') > 0)){\n    data.is_charging = true\n}\n\nswitch (flow.get('shift_state')) {\n    case 'P':\n    case 'N':\n        data.is_parked = true\n        break;\n    case 'D':\n    case 'R':\n        data.is_parked = false\n        break;\n}\n\nif (state !== \"charging\"){\n    delete data.kwh_charged;\n    delete data.voltage;\n}\n\nmsg.headers={ \n    'Content-Type': 'application/json',\n    'Authorization': 'APIKEY ' + API_KEY\n};\n//msg.payload = {};\nmsg.payload = {tlm: data};\nmsg.userToken = USER_TOKEN;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 440,
        "wires": [
            [
                "e191ae7c8d9b1eab"
            ]
        ]
    },
    {
        "id": "e191ae7c8d9b1eab",
        "type": "http request",
        "z": "53c16985a9ab28c1",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.iternio.com/1/tlm/send?token={{userToken}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2310,
        "y": 420,
        "wires": [
            [
                "cd174c5fbc99a501"
            ]
        ]
    },
    {
        "id": "b513b03057259c13",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "get car state",
        "func": "let previous_state = flow.get('previous_state');\nlet current_state = flow.get('state');\n\n//node.warn(previous_state + \" : \" + current_state);\n\nif (previous_state !== current_state){\n    flow.set('previous_state', current_state);\n    flow.set('i', 300);\n}\n\nmsg.payload = current_state;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 180,
        "wires": [
            [
                "94c63a817f9d634a"
            ]
        ]
    },
    {
        "id": "e4d4cff5c81bbc57",
        "type": "link in",
        "z": "53c16985a9ab28c1",
        "name": "abrp",
        "links": [
            "a33d94f33f79694f",
            "bb89821881876683"
        ],
        "x": 1885,
        "y": 120,
        "wires": [
            [
                "b513b03057259c13"
            ]
        ]
    },
    {
        "id": "4b835269d68806ed",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "set counter",
        "func": "let i=parseInt(flow.get('i'));\ni +=1;\n\nif (i > 300){\n    i = 0;\n}\n\nflow.set('i',i);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set('previous_state', 'asleep');\nflow.set('i', -1)",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 180,
        "wires": [
            [
                "f78061b445e66c5e"
            ]
        ]
    },
    {
        "id": "15efe980708b8c6a",
        "type": "inject",
        "z": "53c16985a9ab28c1",
        "name": "Start ABRP",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1410,
        "y": 180,
        "wires": [
            [
                "4b835269d68806ed"
            ]
        ]
    },
    {
        "id": "cd174c5fbc99a501",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "reset counter",
        "func": "let i=parseInt(flow.get('i'));\n\nif (i > 30){\n    flow.set('i',-1);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2090,
        "y": 300,
        "wires": [
            [
                "4b835269d68806ed"
            ]
        ]
    },
    {
        "id": "9a5eee6a44b2696f",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "delay 10 segs",
        "func": "let i=parseInt(flow.get('i'));\n\nif (i % 2 === 0){\n    msg.payload = true;\n}else{\n    msg.payload = false;\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 380,
        "wires": [
            [
                "a26d51cbd4ee396d"
            ]
        ]
    },
    {
        "id": "88f2c76611bf8862",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "delay 2,5 min",
        "func": "let i=parseInt(flow.get('i'));\n\n//node.warn(\"Valor de 'i': \" + i);\n\nif (i % 30 === 0){\n    msg.payload = true;\n}else{\n    msg.payload = false;\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 460,
        "wires": [
            [
                "a26d51cbd4ee396d"
            ]
        ]
    },
    {
        "id": "a26d51cbd4ee396d",
        "type": "switch",
        "z": "53c16985a9ab28c1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1870,
        "y": 340,
        "wires": [
            [
                "c0ed29937ee3e90d"
            ],
            [
                "cd174c5fbc99a501"
            ]
        ]
    },
    {
        "id": "8a8fd79e8954e3e0",
        "type": "mqtt in",
        "z": "53c16985a9ab28c1",
        "name": "",
        "topic": "teslamate/cars/1/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "acbce132.6eef4",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 130,
        "y": 120,
        "wires": [
            [
                "1558eaeed98e5807"
            ]
        ]
    },
    {
        "id": "c595158f4b2590b2",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "short topic",
        "func": "var short_topic = msg.topic.substring(17);\nmsg.topic = short_topic;\nflow.set(msg.topic, msg.payload);\n//node.warn(msg.topic + \": \" + msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 240,
        "wires": [
            [
                "ab7665f65b2617e4"
            ]
        ]
    },
    {
        "id": "e28a3cef850df1d1",
        "type": "comment",
        "z": "53c16985a9ab28c1",
        "name": "MQTT to Telegram",
        "info": "",
        "x": 110,
        "y": 60,
        "wires": []
    },
    {
        "id": "3cf08632a6d374b1",
        "type": "comment",
        "z": "53c16985a9ab28c1",
        "name": "MQTT to ABRP",
        "info": "",
        "x": 1380,
        "y": 80,
        "wires": []
    },
    {
        "id": "6be647134118cf19",
        "type": "telegram command",
        "z": "53c16985a9ab28c1",
        "name": "/Start",
        "command": "/Start",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "13c2734f57e9b03e",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": true,
        "outputs": 1,
        "x": 750,
        "y": 1340,
        "wires": [
            [
                "bc3d52b9a0f01df2",
                "0a068af0dd8e121d"
            ]
        ]
    },
    {
        "id": "3f9fcfcda9083fe0",
        "type": "telegram event",
        "z": "53c16985a9ab28c1",
        "name": "",
        "bot": "13c2734f57e9b03e",
        "event": "callback_query",
        "autoanswer": false,
        "x": 100,
        "y": 1460,
        "wires": [
            [
                "c710b2cdd30da252",
                "8ec4441ffcfee78e"
            ]
        ]
    },
    {
        "id": "c710b2cdd30da252",
        "type": "switch",
        "z": "53c16985a9ab28c1",
        "name": "",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "summary_global",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "summary_recharge",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "summary_travel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "save_lastsix",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "Travel_",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "save_travel",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 290,
        "y": 1460,
        "wires": [
            [
                "536bf612679ffcb1"
            ],
            [
                "37ef089b3c099485"
            ],
            [
                "a0bf019d11dc2c67"
            ],
            [
                "ee928702fa52a36a"
            ],
            [
                "c16d3d05f128d577"
            ],
            [
                "181fb740314c42e9"
            ]
        ]
    },
    {
        "id": "b58da00b377a4021",
        "type": "telegram sender",
        "z": "53c16985a9ab28c1",
        "name": "send response",
        "bot": "13c2734f57e9b03e",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1280,
        "y": 1460,
        "wires": [
            [
                "03321c15999c6456"
            ]
        ]
    },
    {
        "id": "fba634f171b61657",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "format message",
        "func": "let content = ((msg.topic !== undefined) ? msg.topic : '') + `\n*** Opcions disponibles ***\n`;\n\nlet opts = {\n    parse_mode: \"HTML\",\n    disable_web_page_preview: true,\n    reply_markup: msg.buttons\n};\n\nmsg.payload = {\n    chatId: flow.get('telegram_chatId'),\n    type: 'message',\n    options: opts,\n    content: content\n}\n\nreturn [msg];\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1460,
        "wires": [
            [
                "b58da00b377a4021",
                "4ca93deb3a5e22dc"
            ]
        ]
    },
    {
        "id": "37ef089b3c099485",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "recharge summary",
        "func": "/* temporarly disable */\n//return;\n\nlet state = flow.get(\"state\");\nlet bat = '';\nlet battery_level = flow.get('battery_level');\nlet usable_battery_level = flow.get('usable_battery_level');\nlet energyAdd = flow.get(\"charge_energy_added\");\nlet energyUsed = flow.get(\"energyUsed\");\nlet efficiency = (energyAdd*100/energyUsed).toFixed(2);\nlet timeOfCharge = flow.get('timeOfCharge')\nlet maxPower = flow.get('maxPower');\nlet avgPower = flow.get('avgPower');\nlet start_soc = flow.get(\"startCBL\");;\nlet end_soc = flow.get(\"endCBL\");\nlet textTypeCharge = \"\";\n\nif (usable_battery_level !== battery_level){\n    bat = `Bateria usable ${usable_battery_level}% (<i>${battery_level}%</i>) - ${flow.get('rated_battery_range_km')}km`;\n}else{\n    bat = `Bateria disponible ${usable_battery_level}% - ${flow.get('rated_battery_range_km')}km`;\n}\n\nif (state === \"charging\"){\n    // Remaining\n    let time_to_full = flow.get(\"time_to_full_charge\");\n    let remaining = time_to_full.split('.');\n    let minutes = Math.ceil(60 * Number(\".\" + remaining[1]));\n    let total_minutes = (remaining[0]*60)+minutes;\n    let finish_date = Date.now() + (total_minutes*60000);\n    let new_date = new Date(finish_date);\n    let str_new_date = new_date.toLocaleTimeString('es-ES', {timeZone: 'Europe/Madrid', hour12: false, hour: '2-digit', minute: '2-digit' });\n    let start_date = new Date(flow.get('startCharge')).toLocaleTimeString('es-ES', { timeZone: 'Europe/Madrid', hour12: false, hour: '2-digit', minute: '2-digit' });\n\n    let how_long = \"\";\n    if(remaining[0] > 0){\n        how_long = `${remaining[0]}h ${minutes}m`;\n    } else {\n        how_long = `${minutes}m`;\n    }\n    \n    let voltage = \"\";\n    let amps = \"\";\n    let chargeType = '';\n    if (parseInt(flow.get(\"charger_voltage\")) === 2){\n        chargeType = `DC`;\n        flow.set(\"typeCharge\", 2);\n    }else{\n        chargeType = `AC ${(flow.get(\"charger_phases\") === \"1\")? 'monof√†sica' : 'trif√†sica'}`;\n        flow.set(\"typeCharge\", 1);\n        \n        voltage = `‚ö°Ô∏è Voltatge: ${flow.get(\"charger_voltage\")}V`;\n        amps = `‚ö°Ô∏è Intensitat: ${flow.get(\"charger_actual_current\")}A`;\n    }\n    \n    msg.topic = `*** <a href=\"http://192.168.1.139:3000/d/K9VmZD54k/current-charge-view?orgId=1\">Resum c√†rrega</a> ***\n    \n        üîå  Cargant amb ${chargeType} a ${Math.abs(flow.get(\"power\"))}kW\n        ü™´  ${bat}\n        ‚úÖ Inici de c√†rrega a les ${start_date}\n        üîã  L√≠mit de c√†rrega ${flow.get(\"charge_limit_soc\")}%\n        ‚åõÔ∏è  Temps per finalitzar c√†rrega: ${how_long} \n        ‚è±  Hora de finalitzaci√≥ c√†rrega: ${str_new_date}\n    `;\n\n    if (parseInt(flow.get(\"charger_voltage\")) !== 2) {\n        msg.topic += `    ${voltage}\n        ${amps}\n        üîã ${energyAdd}kWh afegits\n        `;\n    }else{\n        msg.topic += `    üîã ${energyAdd}kWh afegits\n        `;\n    }\n\n}else{\n\n    let typeCharge = flow.get(\"typeCharge\");\n    if (typeCharge === 1){\n        if (flow.get(\"fases\") === \"1\"){\n            textTypeCharge = \"AC monof√†sica\";\n        }else{\n            textTypeCharge = \"AC trif√†sica\";\n        }\n    }else if(typeCharge === 2){\n        textTypeCharge = \"DC\";\n    }\n    \n    msg.topic = `*** <a href=\"http://192.168.1.139:3000/d/BHhxFeZRz/charge-details?from=${flow.get('startDateCharge')}&to=${flow.get('endDateCharge')}&var-car_id=1&var-drive_id=${flow.get('idCharge')}&orgId=1\">Resum c√†rrega</a> ***\n    \n        ü™´ ${bat}\n        üîã L√≠mit de c√†rrega ${flow.get(\"charge_limit_soc\")}%\n        üîå Cable ${(flow.get(\"plugged_in\") === \"true\") ? \"connectat\" : \"no connectat\"}\n        üîã √öltima c√†rrega:\n                \n            üìà  Carregat del <b>${start_soc}%</b> al <b>${end_soc}%</b>\n            ‚ö°Ô∏è  Afegits <b>${energyAdd} kWh</b> \n                  Usats <b>${energyUsed} kWh</b> \n                  Eficiencia <b>${efficiency} %</b> \n            üîå  Afegits amb <b>${textTypeCharge} </b>\n            ‚åõÔ∏è  <b>${timeOfCharge}</b> \n            ü¶æ  <b>${Math.round(avgPower)} kW</b> (max: <b>${Math.round(maxPower)} kW</b>)\n        \n    `;\n    \n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1400,
        "wires": [
            [
                "0a068af0dd8e121d"
            ]
        ]
    },
    {
        "id": "4ca93deb3a5e22dc",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "remove last messageId",
        "func": "//node.warn(\"messageId : \" + context.global.keyboard.messageId);\nif (context.global.keyboard.messageId !== undefined){\n    msg.payload.type = 'deleteMessage';\n    msg.payload.content = context.global.keyboard.messageId;\n    context.global.keyboard.messageId = null;\n}\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1340,
        "wires": [
            [
                "b5075c7fc0aa7063"
            ]
        ]
    },
    {
        "id": "d2429f182df8d511",
        "type": "telegram sender",
        "z": "53c16985a9ab28c1",
        "name": "send response",
        "bot": "13c2734f57e9b03e",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1600,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "bc3d52b9a0f01df2",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "save messageId",
        "func": "context.global.keyboard = { messageId : msg.payload.messageId };\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1340,
        "wires": [
            [
                "4ca93deb3a5e22dc"
            ]
        ]
    },
    {
        "id": "c57cd5f3e6968646",
        "type": "comment",
        "z": "53c16985a9ab28c1",
        "name": "Bot Telegram",
        "info": "",
        "x": 90,
        "y": 1300,
        "wires": []
    },
    {
        "id": "0a068af0dd8e121d",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "set buttons",
        "func": "let keyboards = {\n    'generic': {\n        \"inline_keyboard\": [\n            [\n                {\n                    \"text\": \"Resum general\",\n                    \"callback_data\": \"summary_global\"\n                },\n                {\n                    \"text\": `${(flow.get(\"state\") === \"charging\") ? \"üü¢\" : \"üî¥\"} Resum c√†rrega`,\n                    \"callback_data\": \"summary_recharge\"\n                },\n                {\n                    \"text\": `${(flow.get('state') === \"driving\") ? \"De ruta\" : \"Resum √∫ltim viatge\"}`,\n                    \"callback_data\": \"summary_travel\"\n                }\n            ]\n        ]\n    },\n    'viatge': {\n        \"inline_keyboard\": [\n            [\n                {\n                    \"text\": \"Resum general\",\n                    \"callback_data\": \"summary_global\"\n                },\n                {\n                    \"text\": `${(flow.get(\"state\") === \"charging\") ? \"üü¢\" : \"üî¥\"} Resum c√†rrega`,\n                    \"callback_data\": \"summary_recharge\"\n                },\n                {\n                    \"text\": `${(flow.get(\"state\") === \"driving\") ? \"üîÑ Refresca\" : \"\"}`,\n                    \"callback_data\": \"summary_travel\"\n                },\n                {\n                    \"text\": \"√öltims sis viatges\",\n                    \"callback_data\": \"save_lastsix\"\n                }\n            ]\n        ]\n    },\n    'sis': {\n        \"inline_keyboard\": [\n            [\n                {\n                    \"text\": \"Viatge 1\",\n                    \"callback_data\": \"Travel_1\"\n                },\n                {\n                    \"text\": \"Viatge 2\",\n                    \"callback_data\": \"Travel_2\"\n                },\n                {\n                    \"text\": \"Viatge 3\",\n                    \"callback_data\": \"Travel_3\"\n                }\n            ], \n            [\n                {\n                    \"text\": \"Viatge 4\",\n                    \"callback_data\": \"Travel_4\"\n                },\n                {\n                    \"text\": \"Viatge 5\",\n                    \"callback_data\": \"Travel_5\"\n                },\n                {\n                    \"text\": \"Viatge 6\",\n                    \"callback_data\": \"Travel_6\"\n                }\n            ], \n            [\n                {\n                    \"text\": \"Resum general\",\n                    \"callback_data\": \"summary_global\"\n                },\n                {\n                    \"text\": `${(flow.get(\"state\") === \"charging\") ? \"üü¢\" : \"üî¥\"} Resum c√†rrega`,\n                    \"callback_data\": \"summary_recharge\"\n                },\n                {\n                    \"text\": `${(flow.get('state') === \"driving\") ? \"De ruta\" : \"Resum √∫ltim viatge\"}`,\n                    \"callback_data\": \"summary_travel\"\n                }\n            ],\n            [\n                {\n                    \"text\": \"üíæ Guarda Viatge\",\n                    \"callback_data\": \"save_travel\"\n                }\n            ]\n        ]\n    },\n    'controls': {\n        \"inline_keyboard\": [\n            [\n                {\n                    \"text\": \"Abrir coche\",\n                    \"callback_data\": \"controls_lock\"\n                }\n            ],\n            [\n                {\n                    \"text\": `Frunk`,\n                    \"callback_data\": \"controls_frunk\"\n                },\n                {\n                    \"text\": \"Maletero\",\n                    \"callback_data\": \"controls_trunk\"\n                },\n                {\n                    \"text\": `Puerto de carga`,\n                    \"callback_data\": \"controls_charge_port\"\n                }\n            ],\n            [\n                {\n                    \"text\": `R√°faga luces`,\n                    \"callback_data\": \"controls_flash_lights\"\n                },\n                {\n                    \"text\": \"Tocar claxon\",\n                    \"callback_data\": \"controls_honk_horn\"\n                },\n                {\n                    \"text\": `Arrancar coche`,\n                    \"callback_data\": \"controls_remote_start\"\n                }\n            ],\n            [\n                {\n                    \"text\": `Volver`,\n                    \"callback_data\": \"back\"\n                }\n            ]\n        ]\n    },\n    'security': {\n        \"inline_keyboard\": [\n            [\n                {\n                    \"text\": \"Resumen general\",\n                    \"callback_data\": \"resume\"\n                },\n                {\n                    \"text\": `${(flow.get(\"state\") === \"charging\") ? \"üü¢\" : \"üî¥\"} Resumen carga`,\n                    \"callback_data\": \"recharge\"\n                }\n            ],\n            [\n                {\n                    \"text\": `Volver`,\n                    \"callback_data\": \"back\"\n                }\n            ]\n        ]\n    }\n};\n\nlet selectedKeyboard = {};\n\nif (keyboards[msg.payload.content] !== undefined) {\n    selectedKeyboard = keyboards[msg.payload.content];\n} else {\n    selectedKeyboard = keyboards['generic'];\n}\n\nmsg.buttons = JSON.stringify(selectedKeyboard);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1460,
        "wires": [
            [
                "fba634f171b61657"
            ]
        ]
    },
    {
        "id": "0e7c6c5a68a5c486",
        "type": "link in",
        "z": "53c16985a9ab28c1",
        "name": "Actions switch",
        "links": [
            "2f5d7807a327af8e",
            "aa04b84720fe3b59"
        ],
        "x": 55,
        "y": 1880,
        "wires": [
            [
                "c7ca7fe89fdcb639"
            ]
        ]
    },
    {
        "id": "8ec4441ffcfee78e",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "save messageId",
        "func": "context.global.keyboard = { messageId : msg.payload.messageId };\nflow.set('saveMessage', msg.payload.messageId);\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "b5075c7fc0aa7063",
        "type": "switch",
        "z": "53c16985a9ab28c1",
        "name": "",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1430,
        "y": 1340,
        "wires": [
            [],
            [
                "d2429f182df8d511"
            ]
        ]
    },
    {
        "id": "1558eaeed98e5807",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "variables",
        "func": "\n// Telegram\nflow.set('telegram_chatId', '000000000');\nflow.set('telegram_token', '0000000000:XXXXXXXXXXXXXXXXXXXX')\n\n// ABRP\nflow.set('abrp_user_token', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX');\nflow.set('abrp_car_model', 'tesla:my:22:my_lfp:rwd');\nflow.set('abrp_api_key', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX');\n\n//geoapigy\n/*\n    Use geoapify to get adres\n    site to get apykey https://myprojects.geoapify.com/api\n*/\n\nflow.set('geoAPY', \"XXXXXXXXXXXXXXXXXXXXXXXXXX\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 180,
        "wires": [
            [
                "c595158f4b2590b2"
            ]
        ]
    },
    {
        "id": "401849d543c1e2c1",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "state changes",
        "func": "let new_state = msg.payload;\nlet previous_state = flow.get('state');\n\n//node.warn(msg.topic + \": \" + msg.payload);\n//flow.set(msg.topic, new_state);\n\nif (previous_state !== new_state){\n    if (new_state === \"online\"){\n        msg.topic = `‚ú® est√† despert`;\n    }else if (new_state === \"asleep\"){\n        msg.topic = `üí§ est√† dormit`;\n        flow.set('sent_resumen','0');\n    }else if (new_state === \"suspended\"){\n        msg.topic = `üõèÔ∏è s'est√† dormint`;\n    }else if (new_state === \"charging\"){\n        msg.topic = `üîå est√† carregant`;\n    }else if (new_state === \"offline\"){\n        msg.topic = `üõ∞Ô∏è no est√† connectat`;\n    }else if (new_state === \"start\"){\n        msg.topic = `üöÄ est√† arrencant`;\n    }else if (new_state === \"driving\"){\n        msg.topic = `üèÅ est√† en marxa`;\n    }else{\n        msg.topic = `‚≠ï amb estat desconegut`;\n    }\n}else{\n    return;\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nflow.set('state','asleep');\nflow.set('sent_resumen','1');",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 60,
        "wires": [
            [
                "a33d94f33f79694f"
            ]
        ]
    },
    {
        "id": "a0bf019d11dc2c67",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "summary_travel",
        "func": "let start = flow.get(\"dades_start\") || [];\nlet end = flow.get(\"dades_end\") || [];\nlet hSortida = new Date(start[0]*1000).toLocaleTimeString('es-ES', { timeZone: 'Europe/Madrid', hour12: false, hour: '2-digit', minute: '2-digit' })\nlet hArribada = (end[0] !== undefined) ? `(${new Date(end[0]*1000).toLocaleTimeString('es-ES', { timeZone: 'Europe/Madrid', hour12: false, hour: '2-digit', minute: '2-digit' })}):</b>` : \":</b>\"\nlet geo = '';\nlet geofence = flow.get('geofence');\nlet latitude = flow.get('latitude');\nlet longitude = flow.get('longitude');\nlet max_speed = flow.get('max_speed');\nlet avg_speed = flow.get('avg_speed').toFixed(0);\nlet vel = flow.get('vel') || [];\nlet max_temp = flow.get('maxTemp').toFixed(1);\nlet min_temp = flow.get('minTemp').toFixed(1);\nlet avg_temp = flow.get('avgTemp').toFixed(1);\nlet altitude = flow.get('altitude') || [];\nlet maxIn_temp = flow.get('maxInTemp').toFixed(1);\nlet minIn_temp = flow.get('minInTemp').toFixed(1);\nlet avgIn_temp = flow.get('avgInTemp').toFixed(1);\nlet onclimate = flow.get('onclimate');\nlet offclimate = flow.get('offclimate');\nlet climatetime = flow.get('climatetime');\nlet energyTravel = flow.get(\"energyTravel\");\n\nfunction site(geofence, latitude, longitude, adres) {\n    if (adres == undefined) {\n        return \"En cam√≠\"\n    } else {\n        if (geofence !== \"\" && geofence !== undefined) {\n            return `<a href=\"https://maps.google.com/maps?q=${latitude},${longitude}\">${geofence}</a>`;\n        } else {\n            return `<a href=\"https://maps.google.com/maps?q=${latitude},${longitude}\">${adres}</a>`;\n        }\n    }\n}\n\nfunction kilometers(km_inici, km_final) {\n    if (km_final == undefined) {\n        let kmactual = flow.get('odometer');\n        return (kmactual - km_inici).toFixed(2)\n    } else {\n        return (km_final - km_inici).toFixed(2)\n    }\n}\n\nfunction diftemps(temp_final, temp_inici) {\n    if (temp_final !== undefined) {\n        var timeDifference = temp_final - temp_inici;\n        var differenceDate = new Date(timeDifference * 1000);\n        var diffHours = differenceDate.getUTCHours();\n        var diffMinutes = differenceDate.getUTCMinutes();\n        var diffSeconds = differenceDate.getUTCSeconds();\n\n        if (diffMinutes == 0) {\n            return diffSeconds + ' s';\n\n        } else if (diffHours == 0) {\n            return diffMinutes + ' m : ' + diffSeconds + ' s';\n        } else {\n            return diffHours + ' h : ' + diffMinutes + ' m : ' + diffSeconds + ' s';\n        }\n    } else {\n        let tempnow = Math.round(Date.now() / 1000);\n        var timeDifference = tempnow - temp_inici;\n        var differenceDate = new Date(timeDifference * 1000);\n        var diffHours = differenceDate.getUTCHours();\n        var diffMinutes = differenceDate.getUTCMinutes();\n        var diffSeconds = differenceDate.getUTCSeconds();\n\n        if (diffMinutes == 0) {\n            return diffSeconds + ' s';\n\n        } else if (diffHours == 0) {\n            return diffMinutes + ' m : ' + diffSeconds + ' s';\n        } else {\n            return diffHours + ' h : ' + diffMinutes + ' m : ' + diffSeconds + ' s';\n        }\n    }\n\n}\n\nfunction mode (arr) {\n    const mode = {};\n    let max = 0, count = 0;\n\n    for (let i = 0; i < arr.length; i++) {\n        const item = arr[i];\n\n        if (mode[item]) {\n            mode[item]++;\n        } else {\n            mode[item] = 1;\n        }\n\n        if (count < mode[item]) {\n            max = item;\n            count = mode[item];\n        }\n    }\n\n    return max;\n};\n\nfunction climateuse(starttimetravel, endtimetravel, timeAc, onclima) {\n    let hores_ac = 0;\n    let minuts_ac = 0;\n    let seg_ac = 0;\n\n    let hores_v = 0;\n    let minuts_v = 0;\n    let seg_v = 0;\n\n    if (timeAc == 0 && onclima == 0) {\n        return \"A/C: Apagat\"\n    } else if (timeAc > 0 && onclima > 0) {\n\n        let time = Date.now();\n        let diftime = timeAc + (time - onclima);\n        let lasttime = new Date(diftime);\n        hores_ac += lasttime.getUTCHours();\n        minuts_ac += lasttime.getUTCMinutes();\n        seg_ac += lasttime.getUTCSeconds();\n\n    } else if (onclima > 0) {\n\n        let time3 = Date.now();\n        let diftime = time3 - onclima;\n        let lasttime = new Date(diftime);\n        hores_ac += lasttime.getUTCHours();\n        minuts_ac += lasttime.getUTCMinutes();\n        seg_ac += lasttime.getUTCSeconds();\n\n    } else if (timeAc > 0) {\n\n        let time = new Date(timeAc);\n        hores_ac += time.getUTCHours();\n        minuts_ac += time.getUTCMinutes();\n        seg_ac += time.getUTCSeconds();\n    }\n\n    if (endtimetravel !== undefined) {\n        var timeDifference = endtimetravel - starttimetravel;\n        var differenceDate = new Date(timeDifference * 1000);\n        hores_v = differenceDate.getUTCHours();\n        minuts_v = differenceDate.getUTCMinutes();\n        seg_v = differenceDate.getUTCSeconds();\n    } else {\n        let tempnow = Math.round(Date.now() / 1000);\n        var timeDifference = tempnow - starttimetravel;\n        var differenceDate = new Date(timeDifference * 1000);\n        hores_v = differenceDate.getUTCHours();\n        minuts_v = differenceDate.getUTCMinutes();\n        seg_v = differenceDate.getUTCSeconds();\n    }\n\n    let htm = hores_ac * 60;\n    let stm = seg_ac / 60;\n    let totalmin = minuts_ac + htm + stm;\n    let htm_v = hores_v * 60;\n    let stm_v = seg_v / 60;\n    let totalmin_v = minuts_v + htm_v + stm_v;\n    let useAC = Math.round(totalmin * 100 / totalmin_v);\n\n    if (hores_ac == 0 && minuts_ac == 0) {\n        return `A/C: ${seg_ac} s (${useAC}%)`\n    } else if (hores_ac == 0) {\n        return `A/C: ${minuts_ac} m : ${seg_ac} s (${useAC}%)`\n    } else {\n        return `A/C: ${hores_ac} h : ${minuts_ac} m : ${seg_ac} s (${useAC}%)`\n    }\n}\n\nfunction battery(end_lvl, start_lvl, energyUsed, km_inici, km_final) {\n    if (end_lvl == undefined) {\n        let lvl_now = flow.get('battery_level');\n        return `Inicial: ${start_lvl}% \n                Actual: ${lvl_now}%  \n                Utilitzada: ${(lvl_now - start_lvl) * -1}% `\n    } else {\n        if (energyUsed != -100) {\n            let consum = (energyUsed / (km_final - km_inici) * 1000).toFixed(0);\n            return `Inicial: ${start_lvl}% \n                Final: ${end_lvl}% \n                Utilitzada: ${(end_lvl - start_lvl) * -1}%\n                Energia usada: ${energyUsed} kWh\n                Consum: ${consum} Wh/km`\n        }else{\n            return `Inicial: ${start_lvl}% \n                Final: ${end_lvl}% \n                Utilitzada: ${(end_lvl - start_lvl) * -1}%`\n        }   \n    }\n}\n\nfunction desnivell(array) {\n    var desnivell_positiu = 0;\n    var desnivell_negatiu = 0;\n\n    for (var i = 1; i < array.length; i++) {\n        var diferencial = array[i] - array[i - 1];\n        if (diferencial > 0) {\n            desnivell_positiu += diferencial;\n        }\n        else {\n            desnivell_negatiu -= diferencial;\n        }\n    }\n    return `Positiu: ${desnivell_positiu} m\n                Negatiu: ${desnivell_negatiu * -1} m\n                Acumulat: ${desnivell_positiu + desnivell_negatiu} m`\n}\n\nmsg.topic = `*** <a href=\"http://192.168.1.139:3000/d/zm7wN6Zgz/drive-details?from=${flow.get('startDateDrive')}&to=${flow.get('endDateDrive')}&var-car_id=1&var-drive_id=${flow.get('idDrive')}&orgId=1\">Resum √∫ltim viatge</a> ***\n    \n    ‚û°Ô∏è  <b>Sordida (${hSortida}): </b>\n                ${site(start[1], start[2], start[3], start[4])}\n    üîö  <b>Arribada ${hArribada}\n                ${site(end[1], end[2], end[3], end[4])}\n    üõ£Ô∏è  <b>km:</b> \n                ${kilometers(start[5], end[5])} km\n    ‚è±Ô∏è  <b>Temps:</b> \n                ${diftemps(end[0], start[0])}\n    üèéÔ∏è  <b>Velocitat:</b>\n                Mitja: ${avg_speed} km/h\n                M√†xima: ${max_speed} km/h  \n                Moda: ${mode(vel)} km/h       \n    üîã  <b>Bateria:</b>\n                ${battery(end[6], start[6], energyTravel, start[5], end[5])}\n    üèî  <b>Desnivell:</b>\n                ${desnivell(altitude)}\n    üå°Ô∏è <b>Temperatura:</b>\n                             <u><i>Exterior</i>           <i>Interior</i>  </u>\n                <u><i>M√†xima</i>     ${max_temp} ¬∞C           ${maxIn_temp} ¬∞C</u>\n                <u><i>M√≠nima</i>      ${min_temp} ¬∞C           ${minIn_temp} ¬∞C</u>\n                <u><i>Mitja</i>         ${avg_temp} ¬∞C           ${avgIn_temp} ¬∞C</u>\n                ${climateuse(start[0], end[0], climatetime, onclimate)}\n        `;\n    \nmsg.payload.content = 'viatge';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1460,
        "wires": [
            [
                "0a068af0dd8e121d"
            ]
        ]
    },
    {
        "id": "a622eb55ea1ec50a",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "States_viatge",
        "func": "/*\n    Catch and reset values of start and end point travel \n*/ \nlet dades_start = [];\nlet dades_end = [];\nlet geofence = flow.get('geofence');\nlet latitude = flow.get('latitude');\nlet longitude = flow.get('longitude');\nlet adres = \"\";\nlet kilometres = flow.get('odometer');\nlet bat = flow.get('battery_level');\nlet wats = flow.get(\"power\");\nlet speed = flow.get('speed');\n\nswitch (flow.get('state')){\n    case \"driving\":\n        //reset final array\n        dades_end = [];\n        //reset speed and temp\n        msg.reset = 0;\n        //reset array moda\n        let vel = [];\n        //reset altitude\n        let altitude = [];\n        //let des_pos = 0;\n        //let des_neg = 0;\n        //reset in temp\n        let onclimate = 0;\n        let offclimate = 0;\n        let climatetime = 0;\n        //date\n        dades_start.push(Math.round(Date.now() / 1000));\n        //site\n        dades_start.push(geofence, latitude, longitude, adres);\n        //km\n        dades_start.push(kilometres);\n        //batery level\n        dades_start.push(bat);\n\n        //set variable flow values\n        flow.set('onclimate', onclimate);\n        flow.set('offclimate', offclimate);\n        flow.set('climatetime', climatetime);\n        flow.set('altitude', altitude);\n        //flow.set('des_pos', des_pos);\n        //flow.set('des_neg', des_neg);\n        flow.set('vel', vel);\n        flow.set(\"dades_start\", dades_start);\n        flow.set(\"dades_end\", dades_end);\n        break;\n    case \"online\":\n        if(dades_end.length == 0){\n            //date\n            dades_end.push(Math.round(Date.now() / 1000));\n            //site\n            dades_end.push(geofence, latitude, longitude, adres);\n            //km\n            dades_end.push(kilometres);\n            //batery level\n            dades_end.push(bat);\n\n            //set variable flow values\n            flow.set(\"dades_end\", dades_end);\n            break;\n        }\n}\nflow.set(\"etapes\", \"\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 700,
        "wires": [
            [
                "16181c51e785c06b",
                "e60eabae4d1aab24",
                "3a94018bbf98e1dd",
                "72cd3ae89df0d454",
                "d03973ca6d5c0f95",
                "34a6cf17969b95d8",
                "4bc8ed837f8ba608",
                "fef0d377327dfb0e",
                "e7c6b7d3bd3c5e89",
                "46cd8225792210f1",
                "5335d1d42c7ed194",
                "d8bb4149ceca73a1"
            ]
        ]
    },
    {
        "id": "f521fda500a5cd06",
        "type": "comment",
        "z": "53c16985a9ab28c1",
        "name": "Resum √∫ltim viatge",
        "info": "",
        "x": 110,
        "y": 660,
        "wires": []
    },
    {
        "id": "6488355b1867468b",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Speed Max",
        "func": "flow.set(\"max_speed\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "531b7b19660d3b6c",
        "type": "inject",
        "z": "53c16985a9ab28c1",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.25",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 760,
        "wires": [
            [
                "8005a6e7156dbac6"
            ]
        ]
    },
    {
        "id": "8005a6e7156dbac6",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Get speed",
        "func": "//get value of speed when state is driving\n\nvar speed = flow.get('speed');\nlet vel = flow.get('vel') || [];\n\nswitch (flow.get('state')) {\n    case \"driving\":\n        if (speed > 0){\n            vel.push(speed);\n        }\n        msg.payload = speed;\n        flow.set('vel', vel);\n        return msg;\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 760,
        "wires": [
            [
                "16181c51e785c06b",
                "d03973ca6d5c0f95"
            ]
        ]
    },
    {
        "id": "16181c51e785c06b",
        "type": "smooth",
        "z": "53c16985a9ab28c1",
        "name": "Max Vel",
        "property": "payload",
        "action": "max",
        "count": "100000",
        "round": "0",
        "mult": "single",
        "reduce": false,
        "x": 740,
        "y": 740,
        "wires": [
            [
                "6488355b1867468b"
            ]
        ]
    },
    {
        "id": "10204c2cfc38a340",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "GetAdre√ßa",
        "func": "let apykey = flow.get('geoAPY');\nlet dades_start = flow.get(\"dades_start\") || [];\nlet dades_end = flow.get(\"dades_end\") || [];\n\nswitch (flow.get('state')) {\n    case \"driving\":\n        let latstart = dades_start[2];\n        let longstart = dades_start[3];\n        var url = `https://api.geoapify.com/v1/geocode/reverse?lat=${latstart}&lon=${longstart}&format=json&apiKey=${apykey}`\n        msg.url = url;\n        break;\n    case \"online\":\n        let latend = dades_end[2];\n        let longend = dades_end[3];\n        var url = `https://api.geoapify.com/v1/geocode/reverse?lat=${latend}&lon=${longend}&format=json&apiKey=${apykey}`\n        msg.url = url;\n        break;\n}\n\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1240,
        "wires": [
            [
                "5f7e4cea77c38bd7"
            ]
        ]
    },
    {
        "id": "5f7e4cea77c38bd7",
        "type": "http request",
        "z": "53c16985a9ab28c1",
        "name": "HTTP Request (GET)",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 1240,
        "wires": [
            [
                "61295a41d4e7857b"
            ]
        ]
    },
    {
        "id": "61295a41d4e7857b",
        "type": "json",
        "z": "53c16985a9ab28c1",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 650,
        "y": 1240,
        "wires": [
            [
                "1475a8b8ba5a1622"
            ]
        ]
    },
    {
        "id": "1475a8b8ba5a1622",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Adre√ßa",
        "func": "//Set adres of start and end point travel\n\nlet dades_start = flow.get(\"dades_start\") || [];\nlet dades_end = flow.get(\"dades_end\") || [];\nlet new_state = msg.topic;\nlet previous_state = flow.get('state');\n\nswitch (flow.get('state')) {\n    case \"driving\":\n        dades_start[4] = `${msg.payload.results[0].street} ${(msg.payload.results[0].housenumber == undefined) ? \"S/N\" : msg.payload.results[0].housenumber}, ${msg.payload.results[0].city}`;//msg.payload.results[0].formatted\n        msg.topic = `${msg.payload.results[0].street} ${(msg.payload.results[0].housenumber == undefined) ? \"S/N\" : msg.payload.results[0].housenumber}, ${msg.payload.results[0].city}`;\n        flow.set(\"dades_start\", dades_start);\n        break;\n    case \"online\":\n        dades_end[4] = `${msg.payload.results[0].street} ${(msg.payload.results[0].housenumber == undefined) ? \"S/N\" : msg.payload.results[0].housenumber}, ${msg.payload.results[0].city}`;\n        msg.topic = `${msg.payload.results[0].street} ${(msg.payload.results[0].housenumber == undefined) ? \"S/N\" : msg.payload.results[0].housenumber}, ${msg.payload.results[0].city}`;\n        flow.set(\"dades_end\", dades_end);\n        break;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "9a827af65c11afda",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Get out temp",
        "func": "//Get out temp value when state is driving\n\nvar temp = flow.get('outside_temp');\n\nswitch (flow.get('state')) {\n    case \"driving\":\n        msg.payload = temp;\n        return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 940,
        "wires": [
            [
                "72cd3ae89df0d454",
                "3a94018bbf98e1dd",
                "e60eabae4d1aab24"
            ]
        ]
    },
    {
        "id": "d1f7863402a9491f",
        "type": "inject",
        "z": "53c16985a9ab28c1",
        "name": "",
        "props": [],
        "repeat": "180",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 940,
        "wires": [
            [
                "9a827af65c11afda"
            ]
        ]
    },
    {
        "id": "72cd3ae89df0d454",
        "type": "smooth",
        "z": "53c16985a9ab28c1",
        "name": "Max Temp",
        "property": "payload",
        "action": "max",
        "count": "100",
        "round": "1",
        "mult": "single",
        "reduce": false,
        "x": 750,
        "y": 880,
        "wires": [
            [
                "ac3ae20e84a709f5"
            ]
        ]
    },
    {
        "id": "3a94018bbf98e1dd",
        "type": "smooth",
        "z": "53c16985a9ab28c1",
        "name": "Min Temp",
        "property": "payload",
        "action": "min",
        "count": "100",
        "round": "1",
        "mult": "single",
        "reduce": false,
        "x": 740,
        "y": 940,
        "wires": [
            [
                "4a679c24e199ebf7"
            ]
        ]
    },
    {
        "id": "e60eabae4d1aab24",
        "type": "smooth",
        "z": "53c16985a9ab28c1",
        "name": "Avg Temp",
        "property": "payload",
        "action": "mean",
        "count": "100",
        "round": "1",
        "mult": "single",
        "reduce": false,
        "x": 740,
        "y": 1000,
        "wires": [
            [
                "6cf911097fc9e358"
            ]
        ]
    },
    {
        "id": "ac3ae20e84a709f5",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Temperatura Max",
        "func": "flow.set('maxTemp', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "43c8a20d965a3f4d",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "save_travel_for6",
        "func": "let start = flow.get(\"dades_start\") || [];\nlet end = flow.get(\"dades_end\") || [];\nlet diaSortida = new Date(start[0] * 1000).toLocaleDateString();\nlet hSortida = new Date(start[0] * 1000).toLocaleTimeString('es-ES', { timeZone: 'Europe/Madrid', hour12: false, hour: '2-digit', minute: '2-digit' });\nlet hArribada = (end[0] !== undefined) ? `(${new Date(end[0] * 1000).toLocaleTimeString('es-ES', { timeZone: 'Europe/Madrid', hour12: false, hour: '2-digit', minute: '2-digit' })}):</b>` : \":</b>\"\nlet geo = '';\nlet geofence = flow.get('geofence');\nlet latitude = flow.get('latitude');\nlet longitude = flow.get('longitude');\nlet max_speed = flow.get('max_speed');\nlet avg_speed = flow.get('avg_speed').toFixed(0);\nlet vel = flow.get('vel') || [];\nlet max_temp = flow.get('maxTemp').toFixed(1);\nlet min_temp = flow.get('minTemp').toFixed(1);\nlet avg_temp = flow.get('avgTemp').toFixed(1);\nlet altitude = flow.get('altitude') || [];\nlet maxIn_temp = flow.get('maxInTemp').toFixed(1);\nlet minIn_temp = flow.get('minInTemp').toFixed(1);\nlet avgIn_temp = flow.get('avgInTemp').toFixed(1);\nlet onclimate = flow.get('onclimate');\nlet offclimate = flow.get('offclimate');\nlet climatetime = flow.get('climatetime');\nlet energyTravel = flow.get(\"energyTravel\");\n\nfunction site(geofence, latitude, longitude, adres) {\n    if (adres == undefined) {\n        return \"En cam√≠\"\n    } else {\n        if (geofence !== \"\" && geofence !== undefined) {\n            return `<a href=\"https://maps.google.com/maps?q=${latitude},${longitude}\">${geofence}</a>`;\n        } else {\n            return `<a href=\"https://maps.google.com/maps?q=${latitude},${longitude}\">${adres}</a>`;\n        }\n    }\n}\n\nfunction kilometers(km_inici, km_final) {\n    if (km_final == undefined) {\n        let kmactual = flow.get('odometer');\n        return (kmactual - km_inici).toFixed(2)\n    } else {\n        return (km_final - km_inici).toFixed(2)\n    }\n}\n\nfunction diftemps(temp_final, temp_inici) {\n    if (temp_final !== undefined) {\n        var timeDifference = temp_final - temp_inici;\n        var differenceDate = new Date(timeDifference * 1000);\n        var diffHours = differenceDate.getUTCHours();\n        var diffMinutes = differenceDate.getUTCMinutes();\n        var diffSeconds = differenceDate.getUTCSeconds();\n\n        if (diffMinutes == 0) {\n            return diffSeconds + ' s';\n\n        } else if (diffHours == 0) {\n            return diffMinutes + ' m : ' + diffSeconds + ' s';\n        } else {\n            return diffHours + ' h : ' + diffMinutes + ' m : ' + diffSeconds + ' s';\n        }\n    } else {\n        let tempnow = Math.round(Date.now() / 1000);\n        var timeDifference = tempnow - temp_inici;\n        var differenceDate = new Date(timeDifference * 1000);\n        var diffHours = differenceDate.getUTCHours();\n        var diffMinutes = differenceDate.getUTCMinutes();\n        var diffSeconds = differenceDate.getUTCSeconds();\n\n        if (diffMinutes == 0) {\n            return diffSeconds + ' s';\n\n        } else if (diffHours == 0) {\n            return diffMinutes + ' m : ' + diffSeconds + ' s';\n        } else {\n            return diffHours + ' h : ' + diffMinutes + ' m : ' + diffSeconds + ' s';\n        }\n    }\n\n}\n\nfunction mode(arr) {\n    const mode = {};\n    let max = 0, count = 0;\n\n    for (let i = 0; i < arr.length; i++) {\n        const item = arr[i];\n\n        if (mode[item]) {\n            mode[item]++;\n        } else {\n            mode[item] = 1;\n        }\n\n        if (count < mode[item]) {\n            max = item;\n            count = mode[item];\n        }\n    }\n\n    return max;\n};\n\nfunction climateuse(starttimetravel, endtimetravel, timeAc, onclima) {\n    let hores_ac = 0;\n    let minuts_ac = 0;\n    let seg_ac = 0;\n\n    let hores_v = 0;\n    let minuts_v = 0;\n    let seg_v = 0;\n\n    if (timeAc == 0 && onclima == 0) {\n        return \"A/C: Apagat\"\n    } else if (timeAc > 0 && onclima > 0) {\n\n        let time = Date.now();\n        let diftime = timeAc + (time - onclima);\n        let lasttime = new Date(diftime);\n        hores_ac += lasttime.getUTCHours();\n        minuts_ac += lasttime.getUTCMinutes();\n        seg_ac += lasttime.getUTCSeconds();\n\n    } else if (onclima > 0) {\n\n        let time3 = Date.now();\n        let diftime = time3 - onclima;\n        let lasttime = new Date(diftime);\n        hores_ac += lasttime.getUTCHours();\n        minuts_ac += lasttime.getUTCMinutes();\n        seg_ac += lasttime.getUTCSeconds();\n\n    } else if (timeAc > 0) {\n\n        let time = new Date(timeAc);\n        hores_ac += time.getUTCHours();\n        minuts_ac += time.getUTCMinutes();\n        seg_ac += time.getUTCSeconds();\n    }\n\n    if (endtimetravel !== undefined) {\n        var timeDifference = endtimetravel - starttimetravel;\n        var differenceDate = new Date(timeDifference * 1000);\n        hores_v = differenceDate.getUTCHours();\n        minuts_v = differenceDate.getUTCMinutes();\n        seg_v = differenceDate.getUTCSeconds();\n    } else {\n        let tempnow = Math.round(Date.now() / 1000);\n        var timeDifference = tempnow - starttimetravel;\n        var differenceDate = new Date(timeDifference * 1000);\n        hores_v = differenceDate.getUTCHours();\n        minuts_v = differenceDate.getUTCMinutes();\n        seg_v = differenceDate.getUTCSeconds();\n    }\n\n    let htm = hores_ac * 60;\n    let stm = seg_ac / 60;\n    let totalmin = minuts_ac + htm + stm;\n    let htm_v = hores_v * 60;\n    let stm_v = seg_v / 60;\n    let totalmin_v = minuts_v + htm_v + stm_v;\n    let useAC = Math.round(totalmin * 100 / totalmin_v);\n\n    if (hores_ac == 0 && minuts_ac == 0) {\n        return `A/C: ${seg_ac} s (${useAC}%)`\n    } else if (hores_ac == 0) {\n        return `A/C: ${minuts_ac} m : ${seg_ac} s (${useAC}%)`\n    } else {\n        return `A/C: ${hores_ac} h : ${minuts_ac} m : ${seg_ac} s (${useAC}%)`\n    }\n}\n\nfunction battery(end_lvl, start_lvl, energyUsed, km_inici, km_final) {\n    if (end_lvl == undefined) {\n        let lvl_now = flow.get('battery_level');\n        return `Inicial: ${start_lvl}% \n                Actual: ${lvl_now}%  \n                Utilitzada: ${(lvl_now - start_lvl) * -1}% `\n    } else {\n        if (energyUsed != -100) {\n            let consum = (energyUsed / (km_final - km_inici) * 1000).toFixed(0);\n            return `Inicial: ${start_lvl}% \n                Final: ${end_lvl}% \n                Utilitzada: ${(end_lvl - start_lvl) * -1}%\n                Energia usada: ${energyUsed} kWh\n                Consum: ${consum} Wh/km`\n        } else {\n            return `Inicial: ${start_lvl}% \n                Final: ${end_lvl}% \n                Utilitzada: ${(end_lvl - start_lvl) * -1}%`\n        }\n    }\n}\n\nfunction desnivell(array) {\n    var desnivell_positiu = 0;\n    var desnivell_negatiu = 0;\n\n    for (var i = 1; i < array.length; i++) {\n        var diferencial = array[i] - array[i - 1];\n        if (diferencial > 0) {\n            desnivell_positiu += diferencial;\n        }\n        else {\n            desnivell_negatiu -= diferencial;\n        }\n    }\n    return `Positiu: ${desnivell_positiu} m\n                Negatiu: ${desnivell_negatiu * -1} m\n                Acumulat: ${desnivell_positiu + desnivell_negatiu} m`\n}\n\nmsg.topic = `*** <a href=\"http://192.168.1.139:3000/d/zm7wN6Zgz/drive-details?from=${flow.get('startDateDrive')}&to=${flow.get('endDateDrive')}&var-car_id=1&var-drive_id=${flow.get('idDrive')}&orgId=1\">Resum √∫ltim viatge ${diaSortida}</a> ***\n    \n    ‚û°Ô∏è  <b>Sordida (${hSortida}): </b>\n                ${site(start[1], start[2], start[3], start[4])}\n    üîö  <b>Arribada ${hArribada}\n                ${site(end[1], end[2], end[3], end[4])}\n    üõ£Ô∏è  <b>km:</b> \n                ${kilometers(start[5], end[5])} km\n    ‚è±Ô∏è  <b>Temps:</b> \n                ${diftemps(end[0], start[0])}\n    üèéÔ∏è  <b>Velocitat:</b>\n                Mitja: ${avg_speed} km/h\n                M√†xima: ${max_speed} km/h  \n                Moda: ${mode(vel)} km/h       \n    üîã  <b>Bateria:</b>\n                ${battery(end[6], start[6], energyTravel, start[5], end[5])}\n    üèî  <b>Desnivell:</b>\n                ${desnivell(altitude)}\n    üå°Ô∏è <b>Temperatura:</b>\n                             <u><i>Exterior</i>           <i>Interior</i>  </u>\n                <u><i>M√†xima</i>     ${max_temp} ¬∞C           ${maxIn_temp} ¬∞C</u>\n                <u><i>M√≠nima</i>      ${min_temp} ¬∞C           ${minIn_temp} ¬∞C</u>\n                <u><i>Mitja</i>         ${avg_temp} ¬∞C           ${avgIn_temp} ¬∞C</u>\n                ${climateuse(start[0], end[0], climatetime, onclimate)}\n        `;\n\nmsg.payload.content = 'viatge';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1820,
        "wires": [
            [
                "ae4529c01e9b0eab"
            ]
        ]
    },
    {
        "id": "fb3e4af4c254a55a",
        "type": "telegram sender",
        "z": "53c16985a9ab28c1",
        "name": "send response",
        "bot": "13c2734f57e9b03e",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1220,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "d2a610da19c666d4",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Format message",
        "func": "let content = msg.topic;\n\nlet opts = {\n    parse_mode: \"HTML\",\n    disable_web_page_preview: true,\n};\n\nmsg.payload = {\n    chatId: flow.get('telegram_chatId'),\n    type: 'message',\n    options: opts,\n    content: content,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1920,
        "wires": [
            [
                "fb3e4af4c254a55a"
            ]
        ]
    },
    {
        "id": "d03973ca6d5c0f95",
        "type": "smooth",
        "z": "53c16985a9ab28c1",
        "name": "avg vel",
        "property": "payload",
        "action": "mean",
        "count": "100000",
        "round": "0",
        "mult": "single",
        "reduce": false,
        "x": 740,
        "y": 800,
        "wires": [
            [
                "5e80500d781d4a02"
            ]
        ]
    },
    {
        "id": "5e80500d781d4a02",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Speed Avg",
        "func": "flow.set(\"avg_speed\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "4a679c24e199ebf7",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Temperatura Min",
        "func": "flow.set('minTemp', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "6cf911097fc9e358",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Temperatura Avg",
        "func": "flow.set('avgTemp', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "27b92b85e68db3f7",
        "type": "inject",
        "z": "53c16985a9ab28c1",
        "name": "",
        "props": [],
        "repeat": "15",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 1100,
        "wires": [
            [
                "30afbb0f95259f0e"
            ]
        ]
    },
    {
        "id": "30afbb0f95259f0e",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Get in temp",
        "func": "//Get in temp values when state is driving\n\nlet intemp = flow.get('inside_temp');\n\n\nswitch (flow.get('state')) {\n    case \"driving\":\n        msg.payload = intemp;\n        return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1100,
        "wires": [
            [
                "34a6cf17969b95d8",
                "4bc8ed837f8ba608",
                "fef0d377327dfb0e"
            ]
        ]
    },
    {
        "id": "34a6cf17969b95d8",
        "type": "smooth",
        "z": "53c16985a9ab28c1",
        "name": "Avg Temp",
        "property": "payload",
        "action": "mean",
        "count": "2000",
        "round": "1",
        "mult": "single",
        "reduce": false,
        "x": 740,
        "y": 1180,
        "wires": [
            [
                "215e216acaf0b300"
            ]
        ]
    },
    {
        "id": "215e216acaf0b300",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Temperatura Avg",
        "func": "flow.set('avgInTemp', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "fef0d377327dfb0e",
        "type": "smooth",
        "z": "53c16985a9ab28c1",
        "name": "Min Temp",
        "property": "payload",
        "action": "min",
        "count": "2000",
        "round": "1",
        "mult": "single",
        "reduce": false,
        "x": 740,
        "y": 1120,
        "wires": [
            [
                "26b1e2b022582678"
            ]
        ]
    },
    {
        "id": "4bc8ed837f8ba608",
        "type": "smooth",
        "z": "53c16985a9ab28c1",
        "name": "Max Temp",
        "property": "payload",
        "action": "max",
        "count": "2000",
        "round": "1",
        "mult": "single",
        "reduce": false,
        "x": 750,
        "y": 1060,
        "wires": [
            [
                "43d8c07311c083cc"
            ]
        ]
    },
    {
        "id": "43d8c07311c083cc",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Temperatura Max",
        "func": "flow.set('maxInTemp', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "26b1e2b022582678",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Temperatura Min",
        "func": "flow.set('minInTemp', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "df0f720ab0503a51",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Power charging",
        "func": "let power = msg.payload;\nlet state = flow.get('state');\nlet fase = flow.get('fase');\n\nif (state == 'charging') {\n    msg.payload = power;\n    fase = flow.get('charger_phases');\n    flow.set('fase', fase);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 380,
        "wires": [
            [
                "e7c6b7d3bd3c5e89",
                "46cd8225792210f1"
            ]
        ]
    },
    {
        "id": "e7c6b7d3bd3c5e89",
        "type": "smooth",
        "z": "53c16985a9ab28c1",
        "name": "Avg Power",
        "property": "payload",
        "action": "mean",
        "count": "2000000",
        "round": "",
        "mult": "single",
        "reduce": false,
        "x": 890,
        "y": 360,
        "wires": [
            [
                "b082a5bf0279a813"
            ]
        ]
    },
    {
        "id": "46cd8225792210f1",
        "type": "smooth",
        "z": "53c16985a9ab28c1",
        "name": "Max Power",
        "property": "payload",
        "action": "max",
        "count": "1000",
        "round": "",
        "mult": "single",
        "reduce": false,
        "x": 890,
        "y": 400,
        "wires": [
            [
                "488ac336e1709076"
            ]
        ]
    },
    {
        "id": "b082a5bf0279a813",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Avg Power",
        "func": "flow.set('avgPower', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "488ac336e1709076",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Max Power",
        "func": "flow.set('maxPower', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "b1f04a7ddc3c27a5",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "AC on D/O",
        "func": "//get value of is_cliamte_on when state change\n\nlet state = msg.payload;\nlet ac = flow.get('is_climate_on');\n\nswitch (state) {\n    case \"driving\":\n        msg.payload = ac;\n        return msg;\n   case \"online\":\n        msg.payload = ac;\n        return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1020,
        "wires": [
            [
                "c71c699748f9f661"
            ]
        ]
    },
    {
        "id": "c71c699748f9f661",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "AC on",
        "func": "//Get time of A/C use \n\nlet climateState = msg.payload;\nlet onclimate = flow.get('onclimate');\nlet offclimate = flow.get('offclimate');\nlet climatetime = flow.get('climatetime');\nlet start = flow.get(\"dades_start\") || [];\nlet end = flow.get(\"dades_end\") || [];\n\nswitch (flow.get('state')) {\n    case 'driving':\n        if (climateState == 'true') {\n            onclimate = Date.now();\n        } else {\n            if (onclimate !== 0) {\n                offclimate = Date.now();\n                climatetime += offclimate - onclimate;\n                onclimate = 0;\n            }\n        }\n        flow.set('onclimate', onclimate);\n        flow.set('offclimate', offclimate);\n        flow.set('climatetime', climatetime);\n        break;\n    case 'online':\n        if (onclimate > 0 && offclimate == 0 && climateState == 'true') {\n            offclimate = Date.now();\n            climatetime += offclimate - onclimate;\n            onclimate = 0;\n\n            flow.set('onclimate', onclimate);\n            flow.set('offclimate', offclimate);\n            flow.set('climatetime', climatetime);\n        }\n        break;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "5335d1d42c7ed194",
        "type": "smooth",
        "z": "53c16985a9ab28c1",
        "name": "Start battery level",
        "property": "payload",
        "action": "min",
        "count": "6000000",
        "round": "",
        "mult": "single",
        "reduce": false,
        "x": 910,
        "y": 440,
        "wires": [
            [
                "ca622d38bf7c46f1"
            ]
        ]
    },
    {
        "id": "d8bb4149ceca73a1",
        "type": "smooth",
        "z": "53c16985a9ab28c1",
        "name": "End battery level",
        "property": "payload",
        "action": "max",
        "count": "200",
        "round": "",
        "mult": "single",
        "reduce": false,
        "x": 910,
        "y": 480,
        "wires": [
            [
                "af5ba4a34b39105c"
            ]
        ]
    },
    {
        "id": "6689debbd72fed7e",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "baterry level charging",
        "func": "let battery = msg.payload;\nif (flow.get('state') == 'charging') {\n    msg.payload = battery;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 460,
        "wires": [
            [
                "5335d1d42c7ed194",
                "d8bb4149ceca73a1"
            ]
        ]
    },
    {
        "id": "ca622d38bf7c46f1",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Start CBL",
        "func": "flow.set('startCBL', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "af5ba4a34b39105c",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "End CBL",
        "func": "flow.set('endCBL', msg.payload+1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "426c0f1b5377b6de",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Time charge",
        "func": "let currentState = flow.get(\"currentState\");\nlet oldState = flow.get(\"oldState\");\nlet startCharge = flow.get(\"startCharge\");\nlet endCharge = flow.get(\"endCharge\");\n\nfunction changeState(newState) {\n    oldState = currentState;\n    currentState = newState;\n    flow.set(\"oldState\", oldState);\n    flow.set(\"currentState\", currentState);\n}\n\nchangeState(msg.payload);\n\nif (oldState !== currentState) {\n    if (currentState === \"charging\") {\n        startCharge = Date.now();\n        flow.set(\"startCharge\", startCharge)\n        flow.set('kmCharge', flow.get('odometer'));\n    }\n}\n\nif (oldState == \"charging\" && currentState == \"online\") {\n    endCharge = Date.now();\n    flow.set(\"endCharge\", endCharge);\n}\n\n\nfunction timeCharge(startTime, endTime) {\n    let time = new Date(endTime - startTime);\n    let hores = time.getUTCHours();\n    let minuts = time.getUTCMinutes();\n    let seg = time.getUTCSeconds();\n    let timeFormat = \"\";\n\n    if (hores == 0 && minuts == 0) {\n        timeFormat = `${seg} s`;\n    } else if (hores == 0) {\n        timeFormat = `${minuts} m : ${seg} s`;\n    } else {\n        timeFormat = `${hores} h : ${minuts} m : ${seg} s`;\n    }\n\n    return timeFormat;\n}\n\nflow.set('timeOfCharge', timeCharge(startCharge, endCharge));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "caa18d950874b3fc",
        "type": "comment",
        "z": "53c16985a9ab28c1",
        "name": "Resum c√†rrega",
        "info": "",
        "x": 660,
        "y": 320,
        "wires": []
    },
    {
        "id": "17c50ef210388a36",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "states",
        "func": "flow.set(\"oldState\", \"driving\");\nflow.set(\"currentState\", \"online\");\nflow.set(\"startCharge\", 0);\nflow.set(\"endCharge\", 0);\nflow.set('fase', \"\")\nflow.set('typeCharge', 0);\nlet lastsixMessages;\nflow.set(\"lastsixMessages\", lastsixMessages);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "a1f018ddb8530190",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Save orders",
        "func": "let start = flow.get(\"dades_start\") || [];\nlet end = flow.get(\"dades_end\") || [];\nlet currentState = flow.get(\"currentState\");\nlet oldState = flow.get(\"oldState\");\nlet km = end[5] - start[5];\n\n\nif (oldState == \"driving\" && km >= 25) {\n    msg.payload = {}\n    msg.payload.content = 'autosave_travel';\n    return msg;\n} else if (currentState == \"charging\") {\n    msg.payload = {}\n    msg.payload.content = 'autosave_charge';\n    return msg;\n} else if (oldState == \"charging\") {\n    msg.payload = {}\n    msg.payload.content = 'autosave_recharge';\n    return msg;\n} else if (currentState == \"asleep\") {\n    msg.payload = {}\n    msg.payload.content = 'autosave_global';\n    return msg;\n}\n\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1920,
        "wires": [
            [
                "b4081cc858c9c654"
            ]
        ]
    },
    {
        "id": "958755ae3f6826ed",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "save recharge",
        "func": "let sumaryCharge = flow.get(\"rechargeSumary\");\nlet dia = new Date().toLocaleDateString();\nlet hora = new Date().toLocaleTimeString('es-ES', { timeZone: 'Europe/Madrid', hour12: false, hour: '2-digit', minute: '2-digit' });\n\nlet split = sumaryCharge.split(\"c√†rrega:\")[1].split(\"            \");\nmsg.topic = `*** <a href=\"http://192.168.1.139:3000/d/BHhxFeZRz/charge-details?from=${flow.get('startDateCharge')}&to=${flow.get('endDateCharge')}&var-car_id=1&var-drive_id=${flow.get('idCharge')}&orgId=1\">C√†rrega del ${dia} ${hora}</a> ***\n\n${split[2]}${split[3]}${split[4]}${split[5]}${split[6]}${split[7]}${split[8]}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1980,
        "wires": [
            [
                "d2a610da19c666d4",
                "6fe05f84e5ea0c1b",
                "d4c1953104e80b3e"
            ]
        ]
    },
    {
        "id": "2f5d7807a327af8e",
        "type": "link out",
        "z": "53c16985a9ab28c1",
        "name": "state",
        "mode": "link",
        "links": [
            "0e7c6c5a68a5c486",
            "ff42f8e6ba816ceb"
        ],
        "x": 435,
        "y": 320,
        "wires": []
    },
    {
        "id": "574022d592e40ccd",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Vampire Drain",
        "func": "let battery = flow.get('battery_level');\nlet end = flow.get(\"dades_end\") || [];\n\nif (flow.get('state') == 'online') {\n    let vampireDrain = end[6] - battery\n    if(vampireDrain > 0){\n        flow.set(\"vampireDrain\", vampireDrain);\n    }\n} else {\n    flow.set(\"vampireDrain\", 0);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "2b31f917f81c0d8c",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "save global summary",
        "func": "/* temporarly disable */\n//return;\n\n\nlet bat = '';\nlet geo = '';\nlet state = '';\nlet km = '';\nlet kmBat = flow.get('odometer') - flow.get('kmCharge');\nlet inside_temp = flow.get('inside_temp');\nlet outside_temp = flow.get('outside_temp');\nlet battery_level = flow.get('battery_level');\nlet usable_battery_level = flow.get('usable_battery_level');\nlet vampire = flow.get(\"vampireDrain\");\nlet geofence = flow.get('geofence');\nlet latitude = flow.get('latitude');\nlet longitude = flow.get('longitude');\nlet last_status_change = new Date(flow.get('since'));\nlet sentry_mode = '';\nlet dades_end = flow.get(\"dades_end\") || [];\nlet dia = new Date().toLocaleDateString();\nlet hora = new Date().toLocaleTimeString('es-ES', { timeZone: 'Europe/Madrid', hour12: false, hour: '2-digit', minute: '2-digit' });\nlet adresa = dades_end[4];\n\nfunction calc_difference() {\n  let diffInMilliSeconds = Math.abs(new Date().getTime() - new Date(flow.get('since')).getTime()) / 1000;\n\n  // calculate days\n  const days = Math.floor(diffInMilliSeconds / 86400);\n  diffInMilliSeconds -= days * 86400;\n\n  // calculate hours\n  const hours = Math.floor(diffInMilliSeconds / 3600) % 24;\n  diffInMilliSeconds -= hours * 3600;\n\n  // calculate minutes\n  const minutes = Math.floor(diffInMilliSeconds / 60) % 60;\n  diffInMilliSeconds -= minutes * 60;\n\n  let difference = '';\n  if (days > 0) {\n    difference += `${days}d `;\n  }\n  if (hours > 0) {\n    difference += `${hours}h `;\n  }\n\n  difference += `${minutes}m`;\n\n  return difference;\n\n}\n\nfunction toFloat(num, precision) {\n  return parseFloat(num).toFixed(precision);\n}\n\n/**\n* @param {number} percent\n*/\nfunction getBatteryIcon(percent) {\n  let ico = `üîã `;\n  if (percent <= 40) {\n    ico = `ü™´ `;\n  }\n  return ico;\n}\n\nswitch (flow.get('state')) {\n  case \"online\":\n    state = 'Despert'\n    break;\n  case \"asleep\":\n    state = `Dormit fa ${calc_difference()}`\n    break;\n  case \"suspended\":\n    state = `Dormint-se des de fa ${calc_difference()}`\n    break;\n  case \"charging\":\n    state = 'Carregant'\n    break;\n  case \"offline\":\n    state = 'Desconectat'\n    break;\n  case \"start\":\n    state = 'Arrancant'\n    break;\n  case \"driving\":\n    state = 'Condu√Ønt'\n    break;\n  default:\n    state = 'Desconegut'\n}\n\nbat = getBatteryIcon(usable_battery_level);\nif (usable_battery_level !== battery_level) {\n  if (vampire > 0) {\n    bat += ` Usable ${usable_battery_level}% (disp. ${battery_level}%) - ${flow.get('rated_battery_range_km')} km\n    ü¶á Consum vamp√≠ric ${vampire}%`;\n  } else {\n    bat += ` Usable ${usable_battery_level}% (disp. ${battery_level}%) - ${flow.get('rated_battery_range_km')} km`;\n  }\n} else {\n  if (vampire > 0) {\n    bat += ` Disponible ${usable_battery_level}% - ${flow.get('rated_battery_range_km')} km\n    ü¶á Consum vamp√≠ric ${vampire}%`;\n  } else {\n    bat += ` Disponible ${usable_battery_level}% - ${flow.get('rated_battery_range_km')} km`;\n  }\n}\n\nif (kmBat > 0) {\n  km = `‚öôÔ∏è  ${Intl.NumberFormat('es-ES').format(parseInt(flow.get('odometer')))} km\n          ${kmBat.toFixed(2)} km des de l'√∫ltima c√†rrega`\n} else {\n  km = `‚öôÔ∏è  ${Intl.NumberFormat('es-ES').format(parseInt(flow.get('odometer')))} km`\n}\n\nif (geofence !== \"\" && geofence !== undefined) {\n  geo = `Est√† a <a href=\"https://maps.google.com/maps?q=${latitude},${longitude}\">${geofence}</a>`;\n} else {\n  geo = `Est√† a <a href=\"https://maps.google.com/maps?q=${latitude},${longitude}\">${adresa}</a>`;\n}\n\nif (flow.get('sentry_mode') === \"true\") {\n  sentry_mode = `üü¢  Sentinella activat`;\n} else {\n  sentry_mode = `‚ö´Ô∏è  Sentinella desactivat`;\n}\n\nmsg.topic = `*** Resum general ${dia} ${hora} ***\n\n    üíø  <a href=\"https://www.notateslaapp.com/software-updates/version/${flow.get('version')}/release-notes\">${flow.get('version')}</a> ${(flow.get('update_available') === 'true') ? `(disponible <a href=\"https://www.notateslaapp.com/software-updates/version/${flow.get('update_version')}/release-notes\"><i>${flow.get('update_version')}</i></a>)` : ''}\n    üöó  ${state}\n    ${km}\n    üîê  ${(flow.get('locked') === \"true\") ? 'Tancat' : 'Obert'}\n    ${bat}\n    üõû  Pressi√≥ de les rodes:\n              ${toFloat(flow.get('tpms_pressure_fl'), 3)} --- ${toFloat(flow.get('tpms_pressure_fr'), 3)}\n              ${toFloat(flow.get('tpms_pressure_rl'), 3)} --- ${toFloat(flow.get('tpms_pressure_rr'), 3)}\n    üå°Ô∏è  Interior ${inside_temp}¬∫C\n    üå°Ô∏è  Exterior ${outside_temp}¬∫C\n    üåé  ${geo}\n    ${sentry_mode}\n`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1860,
        "wires": [
            [
                "d2a610da19c666d4",
                "f94521ae8226c04e",
                "d4c1953104e80b3e"
            ]
        ]
    },
    {
        "id": "7c721a6520c6ae9d",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "recharge summary",
        "func": "/* temporarly disable */\n//return;\n\nlet state = flow.get(\"state\");\nlet bat = '';\nlet battery_level = flow.get('battery_level');\nlet usable_battery_level = flow.get('usable_battery_level');\nlet energyAdd = flow.get(\"charge_energy_added\");\nlet energyUsed = flow.get(\"energyUsed\");\nlet efficiency = (energyAdd * 100 / energyUsed).toFixed(2);\nlet timeOfCharge = flow.get('timeOfCharge')\nlet maxPower = flow.get('maxPower');\nlet avgPower = flow.get('avgPower');\nlet start_soc = flow.get(\"startCBL\");;\nlet end_soc = flow.get(\"endCBL\");\nlet textTypeCharge = \"\";\n\nif (usable_battery_level !== battery_level) {\n    bat = `Bateria usable ${usable_battery_level}% (<i>${battery_level}%</i>) - ${flow.get('rated_battery_range_km')}km`;\n} else {\n    bat = `Bateria disponible ${usable_battery_level}% - ${flow.get('rated_battery_range_km')}km`;\n}\n\nif (state === \"charging\") {\n    // Remaining\n    let time_to_full = flow.get(\"time_to_full_charge\");\n    let remaining = time_to_full.split('.');\n    let minutes = Math.ceil(60 * Number(\".\" + remaining[1]));\n    let total_minutes = (remaining[0] * 60) + minutes;\n    let finish_date = Date.now() + (total_minutes * 60000);\n    let new_date = new Date(finish_date);\n    let str_new_date = new_date.toLocaleTimeString('es-ES', { timeZone: 'Europe/Madrid', hour12: false, hour: '2-digit', minute: '2-digit' });\n    let start_date = new Date(flow.get('startCharge')).toLocaleTimeString('es-ES', { timeZone: 'Europe/Madrid', hour12: false, hour: '2-digit', minute: '2-digit' });\n\n    let how_long = \"\";\n    if (remaining[0] > 0) {\n        how_long = `${remaining[0]}h ${minutes}m`;\n    } else {\n        how_long = `${minutes}m`;\n    }\n\n    let voltage = \"\";\n    let amps = \"\";\n    let chargeType = '';\n    if (parseInt(flow.get(\"charger_voltage\")) === 2) {\n        chargeType = `DC`;\n        flow.set(\"typeCharge\", 2);\n    } else {\n        chargeType = `AC ${(flow.get(\"charger_phases\") === \"1\") ? 'monof√†sica' : 'trif√†sica'}`;\n        flow.set(\"typeCharge\", 1);\n\n        voltage = `‚ö°Ô∏è Voltatge: ${flow.get(\"charger_voltage\")}V`;\n        amps = `‚ö°Ô∏è Intensitat: ${flow.get(\"charger_actual_current\")}A`;\n    }\n\n    msg.topic = `*** Resum c√†rrega ***\n    \n        üîå  Cargant amb ${chargeType} a ${Math.abs(flow.get(\"power\"))}kW\n        ü™´  ${bat}\n        ‚úÖ Inici de c√†rrega a les ${start_date}\n        üîã  L√≠mit de c√†rrega ${flow.get(\"charge_limit_soc\")}%\n        ‚åõÔ∏è  Temps per finalitzar c√†rrega: ${how_long} \n        ‚è±  Hora de finalitzaci√≥ c√†rrega: ${str_new_date}\n    `;\n\n    if (parseInt(flow.get(\"charger_voltage\")) !== 2) {\n        msg.topic += `    ${voltage}\n        ${amps}\n        üîã ${energyAdd}kWh afegits\n        `;\n    } else {\n        msg.topic += `    üîã ${energyAdd}kWh afegits\n        `;\n    }\n\n} else {\n\n    let typeCharge = flow.get(\"typeCharge\");\n    if (typeCharge === 1) {\n        if (flow.get(\"fases\") === \"1\") {\n            textTypeCharge = \"AC monof√†sica\";\n        } else {\n            textTypeCharge = \"AC trif√†sica\";\n        }\n    } else if (typeCharge === 2) {\n        textTypeCharge = \"DC\";\n    }\n\n    msg.topic = `*** Resum c√†rrega ***\n    \n        ü™´ ${bat}\n        üîã L√≠mit de c√†rrega ${flow.get(\"charge_limit_soc\")}%\n        üîå Cable ${(flow.get(\"plugged_in\") === \"true\") ? \"connectat\" : \"no connectat\"}\n        üîã √öltima c√†rrega:\n                \n            üìà  Carregat del <b>${start_soc}%</b> al <b>${end_soc}%</b>\n            ‚ö°Ô∏è  Afegits <b>${energyAdd} kWh</b> \n                  Usats <b>${energyUsed} kWh</b> \n                  Eficiencia <b>${efficiency} %</b> \n            üîå  Afegits amb <b>${textTypeCharge} </b>\n            ‚åõÔ∏è  <b>${timeOfCharge}</b> \n            ü¶æ  <b>${Math.round(avgPower)} kW</b> (max: <b>${Math.round(maxPower)} kW</b>)\n        \n    `;\n    flow.set(\"rechargeSumary\", msg.topic);\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "33d41549a242c3f6",
        "type": "comment",
        "z": "53c16985a9ab28c1",
        "name": "Bot autosave messages",
        "info": "",
        "x": 120,
        "y": 1820,
        "wires": []
    },
    {
        "id": "03136f3eefe5e75b",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Altitude",
        "func": "let altitude = flow.get('altitude') || [];\nlet elevation = flow.get('elevation');\n\nswitch (flow.get('state')) {\n    case \"driving\":\n        altitude.push(elevation);\n        flow.set('altitude', altitude);\n        break;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "d4c1953104e80b3e",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Get last message ID",
        "func": "let token = flow.get('telegram_token');\nlet chat_id = flow.get('telegram_chatId');\nlet message_id = flow.get(\"saveMessage\")+1;\nlet multimessage = flow.get('multiMessage');\n\nif (multimessage !== message_id){\n    var url = `https://api.telegram.org/bot${token}/deleteMessage?chat_id=${chat_id}&message_id=${multimessage}`\n    msg.url = url;\n    return msg;\n}else{\n    var url = `https://api.telegram.org/bot${token}/deleteMessage?chat_id=${chat_id}&message_id=${message_id}`\n    msg.url = url;\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1980,
        "wires": [
            [
                "801918cd6dd4c436"
            ]
        ]
    },
    {
        "id": "801918cd6dd4c436",
        "type": "http request",
        "z": "53c16985a9ab28c1",
        "name": "HTTP Request (POST)",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1270,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "48d51d59473b57ba",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "save_travel",
        "func": "let start = flow.get(\"dades_start\") || [];\nlet end = flow.get(\"dades_end\") || [];\nlet diaSortida = new Date(start[0] * 1000).toLocaleDateString();\nlet hSortida = new Date(start[0] * 1000).toLocaleTimeString('es-ES', { timeZone: 'Europe/Madrid', hour12: false, hour: '2-digit', minute: '2-digit' });\nlet hArribada = (end[0] !== undefined) ? `(${new Date(end[0] * 1000).toLocaleTimeString('es-ES', { timeZone: 'Europe/Madrid', hour12: false, hour: '2-digit', minute: '2-digit' })}):</b>` : \":</b>\"\nlet geo = '';\nlet geofence = flow.get('geofence');\nlet latitude = flow.get('latitude');\nlet longitude = flow.get('longitude');\nlet max_speed = flow.get('max_speed');\nlet avg_speed = flow.get('avg_speed').toFixed(0);\nlet vel = flow.get('vel') || [];\nlet max_temp = flow.get('maxTemp').toFixed(1);\nlet min_temp = flow.get('minTemp').toFixed(1);\nlet avg_temp = flow.get('avgTemp').toFixed(1);\nlet altitude = flow.get('altitude') || [];\nlet maxIn_temp = flow.get('maxInTemp').toFixed(1);\nlet minIn_temp = flow.get('minInTemp').toFixed(1);\nlet avgIn_temp = flow.get('avgInTemp').toFixed(1);\nlet onclimate = flow.get('onclimate');\nlet offclimate = flow.get('offclimate');\nlet climatetime = flow.get('climatetime');\nlet energyTravel = flow.get(\"energyTravel\");\n\nfunction site(geofence, latitude, longitude, adres) {\n    if (adres == undefined) {\n        return \"En cam√≠\"\n    } else {\n        if (geofence !== \"\" && geofence !== undefined) {\n            return `<a href=\"https://maps.google.com/maps?q=${latitude},${longitude}\">${geofence}</a>`;\n        } else {\n            return `<a href=\"https://maps.google.com/maps?q=${latitude},${longitude}\">${adres}</a>`;\n        }\n    }\n}\n\nfunction kilometers(km_inici, km_final) {\n    if (km_final == undefined) {\n        let kmactual = flow.get('odometer');\n        return (kmactual - km_inici).toFixed(2)\n    } else {\n        return (km_final - km_inici).toFixed(2)\n    }\n}\n\nfunction diftemps(temp_final, temp_inici) {\n    if (temp_final !== undefined) {\n        var timeDifference = temp_final - temp_inici;\n        var differenceDate = new Date(timeDifference * 1000);\n        var diffHours = differenceDate.getUTCHours();\n        var diffMinutes = differenceDate.getUTCMinutes();\n        var diffSeconds = differenceDate.getUTCSeconds();\n\n        if (diffMinutes == 0) {\n            return diffSeconds + ' s';\n\n        } else if (diffHours == 0) {\n            return diffMinutes + ' m : ' + diffSeconds + ' s';\n        } else {\n            return diffHours + ' h : ' + diffMinutes + ' m : ' + diffSeconds + ' s';\n        }\n    } else {\n        let tempnow = Math.round(Date.now() / 1000);\n        var timeDifference = tempnow - temp_inici;\n        var differenceDate = new Date(timeDifference * 1000);\n        var diffHours = differenceDate.getUTCHours();\n        var diffMinutes = differenceDate.getUTCMinutes();\n        var diffSeconds = differenceDate.getUTCSeconds();\n\n        if (diffMinutes == 0) {\n            return diffSeconds + ' s';\n\n        } else if (diffHours == 0) {\n            return diffMinutes + ' m : ' + diffSeconds + ' s';\n        } else {\n            return diffHours + ' h : ' + diffMinutes + ' m : ' + diffSeconds + ' s';\n        }\n    }\n\n}\n\nfunction mode(arr) {\n    const mode = {};\n    let max = 0, count = 0;\n\n    for (let i = 0; i < arr.length; i++) {\n        const item = arr[i];\n\n        if (mode[item]) {\n            mode[item]++;\n        } else {\n            mode[item] = 1;\n        }\n\n        if (count < mode[item]) {\n            max = item;\n            count = mode[item];\n        }\n    }\n\n    return max;\n};\n\nfunction climateuse(starttimetravel, endtimetravel, timeAc, onclima) {\n    let hores_ac = 0;\n    let minuts_ac = 0;\n    let seg_ac = 0;\n\n    let hores_v = 0;\n    let minuts_v = 0;\n    let seg_v = 0;\n\n    if (timeAc == 0 && onclima == 0) {\n        return \"A/C: Apagat\"\n    } else if (timeAc > 0 && onclima > 0) {\n\n        let time = Date.now();\n        let diftime = timeAc + (time - onclima);\n        let lasttime = new Date(diftime);\n        hores_ac += lasttime.getUTCHours();\n        minuts_ac += lasttime.getUTCMinutes();\n        seg_ac += lasttime.getUTCSeconds();\n\n    } else if (onclima > 0) {\n\n        let time3 = Date.now();\n        let diftime = time3 - onclima;\n        let lasttime = new Date(diftime);\n        hores_ac += lasttime.getUTCHours();\n        minuts_ac += lasttime.getUTCMinutes();\n        seg_ac += lasttime.getUTCSeconds();\n\n    } else if (timeAc > 0) {\n\n        let time = new Date(timeAc);\n        hores_ac += time.getUTCHours();\n        minuts_ac += time.getUTCMinutes();\n        seg_ac += time.getUTCSeconds();\n    }\n\n    if (endtimetravel !== undefined) {\n        var timeDifference = endtimetravel - starttimetravel;\n        var differenceDate = new Date(timeDifference * 1000);\n        hores_v = differenceDate.getUTCHours();\n        minuts_v = differenceDate.getUTCMinutes();\n        seg_v = differenceDate.getUTCSeconds();\n    } else {\n        let tempnow = Math.round(Date.now() / 1000);\n        var timeDifference = tempnow - starttimetravel;\n        var differenceDate = new Date(timeDifference * 1000);\n        hores_v = differenceDate.getUTCHours();\n        minuts_v = differenceDate.getUTCMinutes();\n        seg_v = differenceDate.getUTCSeconds();\n    }\n\n    let htm = hores_ac * 60;\n    let stm = seg_ac / 60;\n    let totalmin = minuts_ac + htm + stm;\n    let htm_v = hores_v * 60;\n    let stm_v = seg_v / 60;\n    let totalmin_v = minuts_v + htm_v + stm_v;\n    let useAC = Math.round(totalmin * 100 / totalmin_v);\n\n    if (hores_ac == 0 && minuts_ac == 0) {\n        return `A/C: ${seg_ac} s (${useAC}%)`\n    } else if (hores_ac == 0) {\n        return `A/C: ${minuts_ac} m : ${seg_ac} s (${useAC}%)`\n    } else {\n        return `A/C: ${hores_ac} h : ${minuts_ac} m : ${seg_ac} s (${useAC}%)`\n    }\n}\n\nfunction battery(end_lvl, start_lvl, energyUsed, km_inici, km_final) {\n    if (end_lvl == undefined) {\n        let lvl_now = flow.get('battery_level');\n        return `Inicial: ${start_lvl}% \n                Actual: ${lvl_now}%  \n                Utilitzada: ${(lvl_now - start_lvl) * -1}% `\n    } else {\n        if (energyUsed != -100) {\n            let consum = (energyUsed / (km_final - km_inici) * 1000).toFixed(0);\n            return `Inicial: ${start_lvl}% \n                Final: ${end_lvl}% \n                Utilitzada: ${(end_lvl - start_lvl) * -1}%\n                Energia usada: ${energyUsed} kWh\n                Consum: ${consum} Wh/km`\n        } else {\n            return `Inicial: ${start_lvl}% \n                Final: ${end_lvl}% \n                Utilitzada: ${(end_lvl - start_lvl) * -1}%`\n        }\n    }\n}\n\nfunction desnivell(array) {\n    var desnivell_positiu = 0;\n    var desnivell_negatiu = 0;\n\n    for (var i = 1; i < array.length; i++) {\n        var diferencial = array[i] - array[i - 1];\n        if (diferencial > 0) {\n            desnivell_positiu += diferencial;\n        }\n        else {\n            desnivell_negatiu -= diferencial;\n        }\n    }\n    return `Positiu: ${desnivell_positiu} m\n                Negatiu: ${desnivell_negatiu * -1} m\n                Acumulat: ${desnivell_positiu + desnivell_negatiu} m`\n}\n\nmsg.topic = `*** <a href=\"http://192.168.1.139:3000/d/zm7wN6Zgz/drive-details?from=${flow.get('startDateDrive')}&to=${flow.get('endDateDrive')}&var-car_id=1&var-drive_id=${flow.get('idDrive')}&orgId=1\">Resum √∫ltim viatge ${diaSortida}</a> ***\n\n    ‚û°Ô∏è  <b>Sordida (${hSortida}): </b>\n                ${site(start[1], start[2], start[3], start[4])}\n    üîö  <b>Arribada ${hArribada}\n                ${site(end[1], end[2], end[3], end[4])}\n    üõ£Ô∏è  <b>km:</b> \n                ${kilometers(start[5], end[5])} km\n    ‚è±Ô∏è  <b>Temps:</b> \n                ${diftemps(end[0], start[0])}\n    üèéÔ∏è  <b>Velocitat:</b>\n                Mitja: ${avg_speed} km/h\n                M√†xima: ${max_speed} km/h  \n                Moda: ${mode(vel)} km/h       \n    üîã  <b>Bateria:</b>\n                ${battery(end[6], start[6], energyTravel, start[5], end[5])}\n    üèî  <b>Desnivell:</b>\n                ${desnivell(altitude)}\n    üå°Ô∏è <b>Temperatura:</b>\n                             <u><i>Exterior</i>           <i>Interior</i>  </u>\n                <u><i>M√†xima</i>     ${max_temp} ¬∞C           ${maxIn_temp} ¬∞C</u>\n                <u><i>M√≠nima</i>      ${min_temp} ¬∞C           ${minIn_temp} ¬∞C</u>\n                <u><i>Mitja</i>         ${avg_temp} ¬∞C           ${avgIn_temp} ¬∞C</u>\n                ${climateuse(start[0], end[0], climatetime, onclimate)}\n        `;\n\nmsg.payload.content = 'viatge';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1900,
        "wires": [
            [
                "d2a610da19c666d4",
                "82549213e820f7f2",
                "d4c1953104e80b3e"
            ]
        ]
    },
    {
        "id": "b4081cc858c9c654",
        "type": "switch",
        "z": "53c16985a9ab28c1",
        "name": "",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "autosave_global",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "autosave_travel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "autosave_charge",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "autosave_recharge",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "save_lastsix",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 370,
        "y": 1880,
        "wires": [
            [
                "2b31f917f81c0d8c"
            ],
            [
                "a0c939cd03c98607"
            ],
            [
                "7c721a6520c6ae9d"
            ],
            [
                "a4e9d5332f096a5a",
                "305acf49a3ab1357",
                "7c721a6520c6ae9d",
                "07065bb9d7ca5501"
            ],
            [
                "64c90d263adeabf3"
            ]
        ]
    },
    {
        "id": "f94521ae8226c04e",
        "type": "delay",
        "z": "53c16985a9ab28c1",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 510,
        "y": 1680,
        "wires": [
            [
                "536bf612679ffcb1"
            ]
        ]
    },
    {
        "id": "82549213e820f7f2",
        "type": "delay",
        "z": "53c16985a9ab28c1",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 510,
        "y": 1720,
        "wires": [
            [
                "a0bf019d11dc2c67"
            ]
        ]
    },
    {
        "id": "6fe05f84e5ea0c1b",
        "type": "delay",
        "z": "53c16985a9ab28c1",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 510,
        "y": 1760,
        "wires": [
            [
                "37ef089b3c099485"
            ]
        ]
    },
    {
        "id": "03321c15999c6456",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "save multi messageId",
        "func": "\nflow.set('multiMessage', msg.payload.content.message_id);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "dc1884633f53bdd6",
        "type": "inject",
        "z": "53c16985a9ab28c1",
        "name": "",
        "props": [],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 840,
        "wires": [
            [
                "03136f3eefe5e75b"
            ]
        ]
    },
    {
        "id": "c7ca7fe89fdcb639",
        "type": "delay",
        "z": "53c16985a9ab28c1",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 170,
        "y": 1880,
        "wires": [
            [
                "a1f018ddb8530190",
                "c2062e98e9d5e741"
            ]
        ]
    },
    {
        "id": "536bf612679ffcb1",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "global summary",
        "func": "/* temporarly disable */\n//return;\n\n\nlet bat = '';\nlet geo = '';\nlet state = '';\nlet km = '';\nlet kmBat = flow.get('odometer') - flow.get('kmCharge');\nlet inside_temp = flow.get('inside_temp');\nlet outside_temp = flow.get('outside_temp');\nlet battery_level = flow.get('battery_level');\nlet usable_battery_level = flow.get('usable_battery_level');\nlet vampire = flow.get(\"vampireDrain\");\nlet geofence = flow.get('geofence');\nlet latitude = flow.get('latitude');\nlet longitude = flow.get('longitude');\nlet last_status_change = new Date(flow.get('since'));\nlet sentry_mode = '';\nlet dades_end = flow.get(\"dades_end\") || [];\nlet dia = new Date().toLocaleDateString();\nlet hora = new Date().toLocaleTimeString('es-ES', { timeZone: 'Europe/Madrid', hour12: false, hour: '2-digit', minute: '2-digit' });\nlet adresa = dades_end[4];\n\nfunction calc_difference() {\n  let diffInMilliSeconds = Math.abs(new Date().getTime() - new Date(flow.get('since')).getTime()) / 1000;\n\n  // calculate days\n  const days = Math.floor(diffInMilliSeconds / 86400);\n  diffInMilliSeconds -= days * 86400;\n\n  // calculate hours\n  const hours = Math.floor(diffInMilliSeconds / 3600) % 24;\n  diffInMilliSeconds -= hours * 3600;\n\n  // calculate minutes\n  const minutes = Math.floor(diffInMilliSeconds / 60) % 60;\n  diffInMilliSeconds -= minutes * 60;\n\n  let difference = '';\n  if (days > 0) {\n    difference += `${days}d `;\n  }\n  if (hours > 0) {\n    difference += `${hours}h `;\n  }\n\n  difference += `${minutes}m`;\n\n  return difference;\n\n}\n\nfunction toFloat(num, precision) {\n  return parseFloat(num).toFixed(precision);\n}\n\n/**\n* @param {number} percent\n*/\nfunction getBatteryIcon(percent) {\n  let ico = `üîã `;\n  if (percent <= 40) {\n    ico = `ü™´ `;\n  }\n  return ico;\n}\n\nswitch (flow.get('state')) {\n  case \"online\":\n    state = 'Despert'\n    break;\n  case \"asleep\":\n    state = `Dormit fa ${calc_difference()}`\n    break;\n  case \"suspended\":\n    state = `Dormint-se des de fa ${calc_difference()}`\n    break;\n  case \"charging\":\n    state = 'Carregant'\n    break;\n  case \"offline\":\n    state = 'Desconectat'\n    break;\n  case \"start\":\n    state = 'Arrancant'\n    break;\n  case \"driving\":\n    state = 'Condu√Ønt'\n    break;\n  case \"updating\":\n    state = `Actualitzant durant ${calc_difference()}`;\n    break;\n  default:\n    state = 'Desconegut'\n}\n\nbat = getBatteryIcon(usable_battery_level);\nif (usable_battery_level !== battery_level) {\n  if (vampire > 0) {\n    bat += ` Usable ${usable_battery_level}% (disp. ${battery_level}%) - ${flow.get('rated_battery_range_km')} km\n    ü¶á Consum vamp√≠ric ${vampire}%`;\n  } else {\n    bat += ` Usable ${usable_battery_level}% (disp. ${battery_level}%) - ${flow.get('rated_battery_range_km')} km`;\n  }\n} else {\n  if (vampire > 0) {\n    bat += ` Disponible ${usable_battery_level}% - ${flow.get('rated_battery_range_km')} km\n    ü¶á Consum vamp√≠ric ${vampire}%`;\n  } else {\n    bat += ` Disponible ${usable_battery_level}% - ${flow.get('rated_battery_range_km')} km`;\n  }\n}\n\nif(kmBat > 0){\n  km = `‚öôÔ∏è  ${Intl.NumberFormat('es-ES').format(parseInt(flow.get('odometer')))} km\n          ${kmBat.toFixed(2)} km des de l'√∫ltima c√†rrega`\n}else{\n  km = `‚öôÔ∏è  ${Intl.NumberFormat('es-ES').format(parseInt(flow.get('odometer')))} km`\n}\n\nif (geofence !== \"\" && geofence !== undefined) {\n  geo = `Est√† a <a href=\"https://maps.google.com/maps?q=${latitude},${longitude}\">${geofence}</a>`;\n} else {\n  geo = `Est√† a <a href=\"https://maps.google.com/maps?q=${latitude},${longitude}\">${adresa}</a>`;\n}\n\nif (flow.get('sentry_mode') === \"true\") {\n  sentry_mode = `üü¢  Sentinella activat`;\n} else {\n  sentry_mode = `‚ö´Ô∏è  Sentinella desactivat`;\n}\n\nmsg.topic = `*** Resum general ***\n\n    üíø  <a href=\"https://www.notateslaapp.com/software-updates/version/${flow.get('version')}/release-notes\">${flow.get('version')}</a> ${(flow.get('update_available') === 'true') ? `(disponible <a href=\"https://www.notateslaapp.com/software-updates/version/${flow.get('update_version')}/release-notes\"><i>${flow.get('update_version')}</i></a>)` : ''}\n    üöó  ${state}\n    ${km}\n    üîê  ${(flow.get('locked') === \"true\") ? 'Tancat' : 'Obert'}\n    ${bat}\n    üõû  Pressi√≥ de les rodes:\n              ${toFloat(flow.get('tpms_pressure_fl'), 3)} --- ${toFloat(flow.get('tpms_pressure_fr'), 3)}\n              ${toFloat(flow.get('tpms_pressure_rl'), 3)} --- ${toFloat(flow.get('tpms_pressure_rr'), 3)}\n    üå°Ô∏è  Interior ${inside_temp}¬∫C\n    üå°Ô∏è  Exterior ${outside_temp}¬∫C\n    üåé  ${geo}\n    ${sentry_mode}\n`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1360,
        "wires": [
            [
                "0a068af0dd8e121d"
            ]
        ]
    },
    {
        "id": "a4e9d5332f096a5a",
        "type": "delay",
        "z": "53c16985a9ab28c1",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 530,
        "y": 1980,
        "wires": [
            [
                "958755ae3f6826ed"
            ]
        ]
    },
    {
        "id": "c12ebf2bc70c92b3",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Get query for charge sumary",
        "func": "let oldState = flow.get(\"oldState\");\n\nif (oldState == \"charging\"){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 1760,
        "wires": [
            [
                "07065bb9d7ca5501",
                "df0b743b563e9709",
                "abba05339a96d542",
                "b242b377b9390e98"
            ]
        ]
    },
    {
        "id": "07065bb9d7ca5501",
        "type": "postgresql",
        "z": "53c16985a9ab28c1",
        "name": "Query energy used",
        "query": "SELECT charge_energy_used FROM public.charging_processes\nORDER BY id DESC\nLIMIT 1",
        "postgreSQLConfig": "07193cee98e5185b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2230,
        "y": 1580,
        "wires": [
            [
                "92c431a9ad58b865"
            ]
        ]
    },
    {
        "id": "92c431a9ad58b865",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "energy used",
        "func": "flow.set('energyUsed', msg.payload[0].charge_energy_used)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "07b013433c3a53a8",
        "type": "postgresql",
        "z": "53c16985a9ab28c1",
        "name": "Start date drive",
        "query": "SELECT start_date from public.drives \nORDER BY id DESC \nLIMIT 1;",
        "postgreSQLConfig": "07193cee98e5185b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2220,
        "y": 1880,
        "wires": [
            [
                "8b3ebbb8d6cba9cf"
            ]
        ]
    },
    {
        "id": "117b0513c00c8c14",
        "type": "comment",
        "z": "53c16985a9ab28c1",
        "name": "Querys",
        "info": "",
        "x": 1910,
        "y": 1540,
        "wires": []
    },
    {
        "id": "d02fe38a733b7f4a",
        "type": "postgresql",
        "z": "53c16985a9ab28c1",
        "name": "End date drive",
        "query": "SELECT end_date from public.drives \nORDER BY id DESC \nLIMIT 1;",
        "postgreSQLConfig": "07193cee98e5185b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2220,
        "y": 1940,
        "wires": [
            [
                "e4069cdba74329b2"
            ]
        ]
    },
    {
        "id": "1bf87a1cbb95c1b9",
        "type": "postgresql",
        "z": "53c16985a9ab28c1",
        "name": "id last drive",
        "query": "SELECT id from public.drives \nORDER BY id DESC \nLIMIT 1;",
        "postgreSQLConfig": "07193cee98e5185b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2210,
        "y": 1820,
        "wires": [
            [
                "724c95f435e08756"
            ]
        ]
    },
    {
        "id": "724c95f435e08756",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "id drive",
        "func": "flow.set('idDrive', msg.payload[0].id);\nmsg.payload = msg.payload[0].id;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 1820,
        "wires": [
            [
                "642f70ff5f11ebc3"
            ]
        ]
    },
    {
        "id": "8b3ebbb8d6cba9cf",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "start date drive",
        "func": "flow.set('startDateDrive', msg.payload[0].start_date.getTime() + 7200000)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2460,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "e4069cdba74329b2",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "end datedrive",
        "func": "flow.set('endDateDrive', msg.payload[0].end_date.getTime() + 7200000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2460,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "ff42f8e6ba816ceb",
        "type": "link in",
        "z": "53c16985a9ab28c1",
        "name": "link in 1",
        "links": [
            "2f5d7807a327af8e"
        ],
        "x": 1755,
        "y": 1820,
        "wires": [
            [
                "919c1bb5c70900e2"
            ]
        ]
    },
    {
        "id": "919c1bb5c70900e2",
        "type": "delay",
        "z": "53c16985a9ab28c1",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1870,
        "y": 1820,
        "wires": [
            [
                "c12ebf2bc70c92b3",
                "84edda7a9700f128"
            ]
        ]
    },
    {
        "id": "84edda7a9700f128",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Get query for travel sumary",
        "func": "let oldState = flow.get(\"oldState\");\n\nif (oldState == \"driving\"){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 1880,
        "wires": [
            [
                "1bf87a1cbb95c1b9",
                "07b013433c3a53a8",
                "d02fe38a733b7f4a"
            ]
        ]
    },
    {
        "id": "abba05339a96d542",
        "type": "postgresql",
        "z": "53c16985a9ab28c1",
        "name": "start Date charge",
        "query": "SELECT start_date FROM public.charging_processes\nORDER BY id DESC\nLIMIT 1",
        "postgreSQLConfig": "07193cee98e5185b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2230,
        "y": 1700,
        "wires": [
            [
                "1d77c1b82ffcd93e"
            ]
        ]
    },
    {
        "id": "b242b377b9390e98",
        "type": "postgresql",
        "z": "53c16985a9ab28c1",
        "name": "end Date Charge",
        "query": "SELECT end_date FROM public.charging_processes\nORDER BY id DESC\nLIMIT 1",
        "postgreSQLConfig": "07193cee98e5185b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2230,
        "y": 1760,
        "wires": [
            [
                "2c2dbec08df6ddfc"
            ]
        ]
    },
    {
        "id": "df0b743b563e9709",
        "type": "postgresql",
        "z": "53c16985a9ab28c1",
        "name": "id charge",
        "query": "SELECT id FROM public.charging_processes\nORDER BY id DESC\nLIMIT 1",
        "postgreSQLConfig": "07193cee98e5185b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2200,
        "y": 1640,
        "wires": [
            [
                "a6da20e1dd71e7e2"
            ]
        ]
    },
    {
        "id": "a6da20e1dd71e7e2",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "id charge",
        "func": "flow.set('idCharge', msg.payload[0].id)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "1d77c1b82ffcd93e",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "start date charge",
        "func": "flow.set('startDateCharge', msg.payload[0].start_date.getTime() + 7200000)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "2c2dbec08df6ddfc",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "end date charge",
        "func": "flow.set('endDateCharge', msg.payload[0].end_date.getTime() + 7200000)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2460,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "305acf49a3ab1357",
        "type": "delay",
        "z": "53c16985a9ab28c1",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 530,
        "y": 1940,
        "wires": [
            [
                "7c721a6520c6ae9d"
            ]
        ]
    },
    {
        "id": "642f70ff5f11ebc3",
        "type": "postgresql",
        "z": "53c16985a9ab28c1",
        "name": "Energy travel",
        "query": "SELECT (NULLIF(GREATEST(start_rated_range_km - end_rated_range_km, 0), 0) * car.efficiency)\nFROM public.drives d\nJOIN cars car ON car.id = car_id\nWHERE d.id = {{{msg.payload}}};",
        "postgreSQLConfig": "07193cee98e5185b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2650,
        "y": 1820,
        "wires": [
            [
                "84d66daf8983a507"
            ]
        ]
    },
    {
        "id": "84d66daf8983a507",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "energy travel",
        "func": "try{\n    flow.set('energyTravel', msg.payload[0][\"?column?\"].toFixed(2));\n}catch (err){\n    flow.set('energyTravel', -100); \n}\nmsg.payload = flow.get(\"energyTravel\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2830,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "a0c939cd03c98607",
        "type": "delay",
        "z": "53c16985a9ab28c1",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 1900,
        "wires": [
            [
                "48d51d59473b57ba"
            ]
        ]
    },
    {
        "id": "ae4529c01e9b0eab",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Last six travels",
        "func": "let start = flow.get(\"dades_start\") || [];\nlet end = flow.get(\"dades_end\") || [];\nlet diaSortida = new Date(start[0] * 1000).toLocaleDateString();\nvar lastsixMessages = flow.get(\"lastsixMessages\") || [];;\n\nfunction site(geofence, latitude, longitude, adres) {\n    if (adres == undefined) {\n        return \"En cam√≠\"\n    } else {\n        if (geofence !== \"\" && geofence !== undefined) {\n            return `<a href=\"https://maps.google.com/maps?q=${latitude},${longitude}\">${geofence}</a>`;\n        } else {\n            return `<a href=\"https://maps.google.com/maps?q=${latitude},${longitude}\">${adres}</a>`;\n        }\n    }\n}\n\n// Esta funci√≥n se ejecutar√° cada vez que llegue un nuevo mensaje desde Telegram\nfunction storeLastsixMessages(msg) {\n    // Crear un objeto que represente el mensaje actual\n    var messageObject = {\n        km: (end[5] - start[5]).toFixed(0),\n        content: msg.topic\n    };\n\n    // Agregar el nuevo objeto a la matriz\n    lastsixMessages.push(messageObject);\n\n    // Limitar el tama√±o de la matriz a 5 elementos (los √∫ltimos 5 mensajes)\n    if (lastsixMessages.length > 6) {\n        lastsixMessages.shift(); // Eliminar el mensaje m√°s antiguo (el primero de la matriz)\n    }\n}\n\nstoreLastsixMessages(msg)\n\n\n// Enviar la matriz actualizada a trav√©s del flujo de salida\nmsg.payload = lastsixMessages;\n\nflow.set(\"lastsixMessages\", lastsixMessages);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "ee928702fa52a36a",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Selecci√≥ √∫ltims 6",
        "func": "\nmsg.topic = `<b>√öLTIMS SIS VIATGES</b>`;\n    \nmsg.payload.content = 'sis';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1500,
        "wires": [
            [
                "0a068af0dd8e121d"
            ]
        ]
    },
    {
        "id": "c16d3d05f128d577",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Visualitzaci√≥ √∫ltims viatges",
        "func": "let lastsixMessages = flow.get(\"lastsixMessages\") || [];\nlet viatge = msg.payload.content.split(\"_\");\nlet numViatge = viatge[1] - 1;\n\nmsg.topic = `<b>Viatge ${viatge[1]}</b>\n${lastsixMessages[numViatge].content}`;\n\nmsg.payload.content = 'sis';\n\nflow.set(\"viatge\", viatge[1]);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1540,
        "wires": [
            [
                "0a068af0dd8e121d"
            ]
        ]
    },
    {
        "id": "181fb740314c42e9",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "save_travel",
        "func": "let lastsixMessages = flow.get(\"lastsixMessages\") || [];\nlet viatge = flow.get(\"viatge\");\n\nmsg.topic = `${lastsixMessages[viatge-1].content}`;\n\nmsg.payload.content = `Travel_${viatge}`;\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1580,
        "wires": [
            [
                "d2a610da19c666d4",
                "0f1ef0b608fda7aa"
            ]
        ]
    },
    {
        "id": "0f1ef0b608fda7aa",
        "type": "delay",
        "z": "53c16985a9ab28c1",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 710,
        "y": 1580,
        "wires": [
            [
                "c16d3d05f128d577"
            ]
        ]
    },
    {
        "id": "64c90d263adeabf3",
        "type": "delay",
        "z": "53c16985a9ab28c1",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 1860,
        "wires": [
            [
                "43c8a20d965a3f4d"
            ]
        ]
    },
    {
        "id": "e6ca6aee13b314e1",
        "type": "function",
        "z": "53c16985a9ab28c1",
        "name": "Save orders 6",
        "func": "let start = flow.get(\"dades_start\") || [];\nlet end = flow.get(\"dades_end\") || [];\nlet currentState = flow.get(\"currentState\");\nlet oldState = flow.get(\"oldState\");\nlet km = end[5] - start[5];\n\nif (oldState == \"driving\" && km >= 2) {\n    msg.payload = {}\n    msg.payload.content = 'save_lastsix';\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1960,
        "wires": [
            [
                "b4081cc858c9c654"
            ]
        ]
    },
    {
        "id": "c2062e98e9d5e741",
        "type": "delay",
        "z": "53c16985a9ab28c1",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 110,
        "y": 1960,
        "wires": [
            [
                "e6ca6aee13b314e1"
            ]
        ]
    },
    {
        "id": "13c2734f57e9b03e",
        "type": "telegram bot",
        "z": "53c16985a9ab28c1",
        "botname": "pmb_tesla_bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false,
        "info": "159696647614"
    },
    {
        "id": "acbce132.6eef4",
        "type": "mqtt-broker",
        "name": "mosquitto",
        "broker": "192.168.1.139",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "07193cee98e5185b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "192.168.1.139",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "teslamate",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "teslamate",
        "userFieldType": "str",
        "password": "ferran1993",
        "passwordFieldType": "str"
    }
]